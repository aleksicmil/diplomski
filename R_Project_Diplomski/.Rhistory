frenki <- read.table("Data/FRENKI_predikcije_mapirano.txt", sep = "\t",
header = T)
## Lista svih proteina koji postoje u FRENKI predikcijama
frenki_proteini<- as.data.frame(levels(frenki$UniProt))
names(frenki_proteini) <- c("UniProt")
## Da li se u FRENKI listi koju sam upravu ucitala nalaze proteini iz
## training dataseta?
cafa <- read.table("Data/trening_cafa_C_ext.txt", sep = "\t", header = F)
names(cafa) <- c("UniProt", "GO")
cafa_proteini <- as.data.frame(levels(cafa[, 1]))
names(cafa_proteini) <- c("UniProt")
presek <- merge(frenki_proteini, cafa_proteini, by = "UniProt")
#presek nije nula, tako da ima, moram da ih izbacim
## Iz FRENKIja brise one koji su u CAFA training setu
frenki_pravo <- frenki[!(frenki$UniProt %in% cafa$UniProt),]
frenki_pravo$UniProt <- as.factor(as.character(frenki_pravo$UniProt))
frenki_pravo_proteini <- as.data.frame(levels(frenki_pravo$UniProt))
# radni_u_frenkiju <- merge(frenki, radni, by.x = "UniProt", by.y = "Protein")
#
#
# frenki_mito <- frenki[frenki$Predikcija == go,]
# frenki_pravi_mito <- frenki_pravo[frenki_pravo$Predikcija == go,]
## True positives <- i FRENKI i IMPI tvrde da je protein mitohondrijalni
tp <- merge(radni, frenki, by.x = "Protein", by.y = "UniProt")
tp <- tp[tp$Predikcija == go,]
tp1 <- merge(radni, frenki_pravo, by.x = "Protein", by.y = "UniProt")
tp1 <- tp1[tp1$Predikcija == go,]
## False positives <- u FRENKIju je mito a nema ga u radnom
fp <- frenki[frenki$Predikcija == go & !(frenki$UniProt %in% radni$Protein),]
fp1 <- frenki_pravo[frenki_pravo$Predikcija == go &
!(frenki_pravo$UniProt %in% radni$Protein),]
## False negatives <- ima ga u IMPIju a za FRENKIja nije mitohondrijalni
## (ali postoji u FRENKIju)
fn <- radni[!(radni$Protein %in% tp$Protein) & radni$Protein %in% frenki$UniProt,]
fn1 <- radni[!(radni$Protein %in% tp$Protein) &
radni$Protein %in% frenki_pravo$UniProt,]
## Evaluacija za FRENKI dataset original
precision <- nrow(tp)/(nrow(tp)+nrow(fp))
recall <- nrow(tp)/(nrow(tp)+nrow(fn))
f <- 2*precision*recall/(precision+recall)
## Evaluacija za FRENKI dataset sa izbacenim treningom iz CAFAe
precision1 <- nrow(tp1)/(nrow(tp1)+nrow(fp1))
recall1 <- nrow(tp1)/(nrow(tp1)+nrow(fn1))
f1 <- 2*precision1*recall1/(precision1+recall1)
View(frenki)
View(radni)
rm(list = ls())
read.table("Data/panzzer.txt", sep = "\t", header = T)
pan <- read.table("Data/panzzer.txt", sep = "\t", header = T)
View(pan)
radni <- read.table("Data/radni_dataset.txt", sep = "\t", header = T)
View(radni)
write.table("Data/radni_proteini.txt", radni$Protein, row.names = F, col.names = F,
sep = "\t")
prot <- radni$Protein
prot <- as.data.frame(radni$Protein)
write.table("Data/radni_proteini.txt", prot, row.names = F, col.names = F,
sep = "\t")
write.table(prot, "Data/radni_proteini.txt", row.names = F, col.names = F,
sep = "\t")
write.table(prot, "Data/radni_proteini.txt", row.names = F, col.names = F,
sep = "\t", quote = F)
mp <- read.table("Data/CAFA_mapping.txt", sep = "\t", header = T)
View(mp)
proba <- as.data.frame(mp$X1433B_HUMAN[1:50])
View(proba)
write.table(proba, "Data/probaaa.txt", col.names = F, row.names = F, quote = F)
rm(list = ls())
## Gene Ontologija mitochondrion
go <- "GO:0005739"
## Proteini iz IMPIja koji _nisu_ u CAFA training setu
radni <- read.table("Data/radni_dataset.txt", sep = "\t", header = T)
## FRENKI predikcije, propagirano do najstarije ontologije, mapirano na UniProt
frenki <- read.table("Data/FRENKI_predikcije_mapirano.txt", sep = "\t",
header = T)
## Lista svih proteina koji postoje u FRENKI predikcijama
frenki_proteini<- as.data.frame(levels(frenki$UniProt))
names(frenki_proteini) <- c("UniProt")
cafa <- read.table("Data/trening_cafa_C_ext.txt", sep = "\t", header = F)
names(cafa) <- c("UniProt", "GO")
cafa_proteini <- as.data.frame(levels(cafa[, 1]))
names(cafa_proteini) <- c("UniProt")
presek <- merge(frenki_proteini, cafa_proteini, by = "UniProt")
## Iz FRENKIja brise one koji su u CAFA training setu
frenki_pravo <- frenki[!(frenki$UniProt %in% cafa$UniProt),]
frenki_pravo$UniProt <- as.factor(as.character(frenki_pravo$UniProt))
## Iz FRENKIja brise one koji su u CAFA training setu
frenki_pravo <- frenki[!(frenki$UniProt %in% cafa$UniProt), ]
frenki_pravo$UniProt <- as.factor(as.character(frenki_pravo$UniProt))
frenki_pravo_proteini <- as.data.frame(levels(frenki_pravo$UniProt))
# radni_u_frenkiju <- merge(frenki, radni, by.x = "UniProt", by.y = "Protein")
#
#
frenki_mito <- frenki[frenki$Predikcija == go,]
View(frenki_mito)
frenki_pravi_mito <- frenki_pravo[frenki_pravo$Predikcija == go,]
## True positives <- i FRENKI i IMPI tvrde da je protein mitohondrijalni
tp <- merge(radni, frenki, by.x = "Protein", by.y = "UniProt")
tp <- tp[tp$Predikcija == go,]
tp1 <- merge(radni, frenki_pravo, by.x = "Protein", by.y = "UniProt")
tp1 <- tp1[tp1$Predikcija == go,]
## False positives <- u FRENKIju je mito a nema ga u radnom
fp <- frenki[frenki$Predikcija == go & !(frenki$UniProt %in% radni$Protein), ]
fp1 <- frenki_pravo[frenki_pravo$Predikcija == go &
!(frenki_pravo$UniProt %in% radni$Protein),]
rm(list = ls())
radni <- read.table("Data/radni_dataset.txt", sep = "\t", header = T)
frenki <- read.table("Data/FRENKI_predikcije_mapirano.txt", header = T, sep = "\t")
go <- "GO:0005739"
frenki.mito <- frenki[frenki$Predikcija == go, ]
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = T, sep = "\t")
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
View(cafa)
names(cafa) <- c("UniProt", "Predikcija")
cafa.proteini <- levels(cafa$UniProt)
cafa.proteini <- as.data.frame(levels(cafa$UniProt))
provera <- merge(frenki.mito, cafa.proteini, by = "UniProt")
View(frenki.mito)
View(frenki.mito)
View(cafa.proteini)
names(cafa.proteini) <- c("UniProt")
provera <- merge(frenki.mito, cafa.proteini, by = "UniProt")
cafa.mito <- cafa[cafa$UniProt == go, ]
table(cafa[cafa$UniProt == go, ])
table(cafa$UniProt == go)
View(cafa)
table(cafa$UniProt == "GO:0044424")
cafa.mito <- cafa[cafa$Predikcija == go, ]
provera <- merge(frenki.mito, cafa.mito, by = "UniProt")
rm(cafa.proteini)
frenki.mito.cisto <- frenki.mito[!(frenki.mito$UniProt %in% cafa.mito$UniProt), ]
3163-381
names(cafa.mito) <- c("UniProt")
names(cafa.mito) <- c("UniProt", "Predikcija")
View(cafa.mito)
provera <- merge(frenki.mito, cafa.mito, by = "UniProt")
frenki.mito.cisto <- frenki.mito[!(frenki.mito$UniProt %in% cafa.mito), ]
frenki.mito.cisto <- frenki.mito[!(frenki.mito$UniProt %in% cafa.mito$UniProt), ]
tp <- merge(radni, frenki.mito.cisto, by = "UniProt")
View(radni)
tp <- merge(radni, frenki.mito.cisto, by.x = "Protein", by.y = "UniProt")
fp <- frenki.mito.cisto[!(frenki.mito.cisto$UniProt %in% radni$Protein), ]
2735-91
2782-91
View(tp)
tp <- merge(frenki.mito.cisto, radni, by.y = "Protein", by.x = "UniProt")
merge(tp, fp, by = "UniProt" )
pr <- merge(tp, fp, by = "UniProt")
View(pr)
2735+91
fp <- frenki.mito.cisto[!(frenki.mito.cisto$UniProt %in% tp$UniProt), ]
frenki.mito.cisto$UniProt <- as.factor(as.character(frenki.mito.cisto))
frenki.mito.cisto$UniProt <- as.factor(as.character(frenki.mito.cisto$UniProt))
tp <- merge(frenki.mito.cisto, radni, by.y = "Protein", by.x = "UniProt")
fp <- frenki.mito.cisto[!(frenki.mito.cisto$UniProt %in% tp$UniProt), ]
tp$UniProt <- as.factor(as.character(tp$UniProt))
fp <- frenki.mito.cisto[!(frenki.mito.cisto$UniProt %in% tp$UniProt), ]
pr <- merge(tp, fp, by = "UniProt")
View(fp)
View(tp)
fn <- frenki.mito.cisto[-merge(frenki.mito.cisto, radni, by.x = "UniProt",
by.y = "Protein"), ]
fn <- frenki.mito.cisto[-tp, ]
fn <- frenki.mito.cisto[-tp]
a <- c(1, 2, 3)
b <- a[-c(2)]
b
a
b <- a[!c(2)]
b
fp <- frenki.mito.cisto[!(frenki.mito.cisto$UniProt %in% tp$UniProt), ]
fp <- frenki.mito.cisto[-(frenki.mito.cisto$UniProt %in% tp$UniProt), ]
(frenki.mito.cisto$UniProt %in% tp$UniProt)
rm(a, b)
!(frenki.mito.cisto$UniProt %in% tp$UniProt)
table(!(frenki.mito.cisto$UniProt %in% tp$UniProt))
table(frenki.mito.cisto$UniProt %in% tp$UniProt)
2735+47
?which
which(LETTERS == "R")
LETTERS
tp <- frenki.mito.cisto[which(frenki.mito.cisto$UniProt %in% radni$Protein)]
tp <- frenki.mito.cisto[which(frenki.mito.cisto$UniProt %in% radni$Protein), ]
View(tp)
sum(frenki.mito.cisto$UniProt %in% radni$Protein)
fp <- frenki.mito.cisto[which(frenki.mito.cisto$UniProt !%in% tp$UniProt), ]
fp <- frenki.mito.cisto[which(!(frenki.mito.cisto$UniProt %in% tp$UniProt)), ]
pr <- merge(tp, fp, by = "UniProt")
tp.greska <- merge(frenki.mito.cisto, radni, by.y = "Protein", by.x = "UniProt")
tp.greska$UniProt <- as.factor(as.character(tp.greska$UniProt))
levels(tp.greska$UniProt)
View(tp.greska)
frenki.mito$UniProt  <- as.factor(as.character(frenki$UniProt))
frenki <- read.table("Data/FRENKI_predikcije_mapirano.txt",
header = T,
sep = "\t")
frenki.mito <- frenki[frenki$Predikcija == go, ]
frenki.mito$UniProt  <- as.factor(as.character(frenki.mito$UniProt))
levels(frenki.mito$UniProt)
View(frenki.mito)
str(frenki.mito)
str(frenki.mito$UniProt)
table(frenki.mito$UniProt[c(10), ])
table(frenki.mito$UniProt[c(10)])
dim(table(frenki.mito$UniProt[c(10), ]))
dim(table(frenki.mito$UniProt[c(10), ]))
dim(c(3, 4, ))
dim(c(3, 4, 3))
dim(c(3, 4, 3), c(4, 5, 6))
dim(table(frenki.mito$UniProt[c(10), ]))
dim(table(frenki.mito$UniProt))
dim(tp)
a <- matrix(c(1, 2, 3), c("a", "a", "b"), nrow = 3, ncol = 2)
a <- matrix(c(1, "a"), c(1, "a"), c(1, "b") nrow = 3, ncol = 2)
a <- matrix(c((1, "a"), (1, "a"), (1, "b")) nrow = 3, ncol = 2)
a <- matrix(c((1, "a"), (1, "a"), (1, "b")),  nrow = 3, ncol = 2)
?matrix
a <- matrix(c(1, 2, 3, "a", "a", "b"),  nrow = 3, ncol = 2, byrow = F)
a
str(a)
a <- as.data.frame(a)
a
str(a)
a <- a[-c(3), ]
str(a)
droplevels(a)$V2
str(a)
droplevels(a)
str(a)
droplevels.data.frame(a)
str(a)
?droplevels.data.frame
rm(list = ls())
go <- "GO:0005739"
radni <- read.table("Data/radni_dataset.txt", sep = "\t", header = T)
frenki <- read.table("Data/FRENKI_predikcije_mapirano.txt",
header = T,
sep = "\t")
frenki.mito <- frenki[frenki$Predikcija == go, ]
droplevels(frenki.mito)$UniProt
frenki.mito <- frenki[frenki$Predikcija == go, ]
str(frenki.mito)
droplevels(frenki.mito)$UniProt
str(frenki.mito)
droplevels(frenki.mito)$UniProt
str(frenki.mito)
frenki.mito <- droplevels(frenki.mito)$UniProt
frenki.mito <- frenki[frenki$Predikcija == go, ]
levels(frenki.mito$UniProt) <- droplevels(frenki.mito)$UniProt
frenki.mito$UniProt <- droplevels(frenki.mito)$UniProt
View(frenki.mito)
frenki.mito <- frenki[frenki$Predikcija == go, ]
str(frenki.mito)
frenki.mito[frenki.mito$UniProt == "T96060000168"]
frenki.mito[frenki.mito$UniProt == "T96060000168", ]
frenki.mito[frenki.mito$CAFA == "T96060000168", ]
frenki.mito$UniProt <- droplevels(frenki.mito)$UniProt
frenki.mito[frenki.mito$CAFA == "T96060000168", ]
str(frenki.mito)
# Izbacivanje CAFA training dataseta iz frenki.mito
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
names(cafa) <- c("UniProt", "Predikcija")
cafa.mito <- cafa[cafa$UniProt == go, ]
names(cafa.mito) <- c("UniProt", "Predikcija")
rm(frenki)
rm(cafa)
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
names(cafa) <- c("UniProt", "Predikcija")
cafa.mito <- cafa[cafa$UniProt == go, ]
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
names(cafa) <- c("UniProt", "Predikcija")
cafa.mito <- cafa[cafa$UniProt == go, ]
View(cafa.mito)
View(cafa)
cafa.mito <- cafa[cafa$Predikcija == go, ]
dim(frenki.mito)[1, ] == dim(levels(frenki.mito$UniProt))
dim(frenki.mito)
dim(frenki.mito)[1, 1] == dim(levels(frenki.mito$UniProt))
dim(frenki.mito)[1, 1]
dim(dim(frenki.mito))
dim(frenki.mito)[1]
dim(levels(frenki.mito$UniProt))
dim(levels(frenki.mito$UniProt))[1]
dim(frenki.mito)[1] == length(levels(frenki.mito$UniProt))
length(levels(frenki.mito$UniProt))
dim(frenki.mito)[1] > length(levels(frenki.mito$UniProt))
?duplicated
x <- c(9:20, 1:5, 3:7, 0:8)
x
duplicated(x)
xu <- x[!duplicated(x)]
xu
(xu2 <- x[!duplicated(x, fromLast = TRUE)])
frenki.mito <- frenki.mito[!duplicated(frenki.mito$UniProt), ]
dim(frenki.mito)[1] > length(levels(frenki.mito$UniProt))
dim(frenki.mito)[1]
length(levels(frenki.mito$UniProt))
sum(duplicated(frenki.mito$UniProt))
frenki.mito <- frenki.mito[!duplicated(frenki.mito$UniProt), ]
dim(frenki.mito)[1] > length(levels(frenki.mito$UniProt))
table(frenki.mito$UniProt[1:10])
table(frenki.mito$UniProt)
View(frenki.mito)
sum(frenki.mito$Skor)
levels(frenki.mito$UniProt)
str(frenki.mito)
levels(frenki.mito$UniProt)
str(frenki.mito)
unique(frenki.mito$UniProt)
iris
duplicated(iris)
duplicated(iris)[140:143]
iris3
duplicated(iris)
duplicated(iris3)
duplicated(iris3, MARGIN = C(1, 3))
duplicated(iris3, MARGIN = c(1, 3))
anyDuplicated(iris)
anyDuplicated(frenki.mito)
anyDuplicated(frenki.mito$UniProt)
str(frenki.mito)
frenki.mito <- frenki.mito[-(frenki.mito$UniProt == NA), ]
frenki.mito <- frenki.mito[!(is.na(frenki.mito$UniProt)), ]
# Frenki predikcije. Izdvojeni proteini za koje je predvidjeno da su mito (3163)
frenki <- read.table("Data/FRENKI_predikcije_mapirano.txt",
header = T,
sep = "\t")
frenki.mito <- frenki[frenki$Predikcija == go, ]
frenki.mito$UniProt <- droplevels(frenki.mito)$UniProt
dim(frenki.mito)[1] > length(levels(frenki.mito$UniProt))
frenki.mito <- frenki.mito[!duplicated(frenki.mito$UniProt), ]
is.na(frenki.mito$UniProt
)
sum(is.na(frenki.mito$UniProt))
!(is.na(frenki.mito$UniProt))
frenki.mito <- frenki.mito[!(is.na(frenki.mito$UniProt))]
frenki.mito <- frenki.mito[!(is.na(frenki.mito$UniProt)), ]
rm(x, xu, xu2)
a <- (1, 2, 3)
a <- c(1, 2, 3)
b <- c(1)
intersect(a, b)
intersect(frenki.mito, cafa,mito)
intersect(frenki.mito, cafa.mito)
intersect(frenki.mito$UniProt, cafa.mito$UniProt)
presek <- intersect(frenki.mito$UniProt, cafa.mito$UniProt)
presek <- as.data.frame(intersect(frenki.mito$UniProt, cafa.mito$UniProt))
View(presek)
names(presek) <- c("UniProt")
(x <- c(sort(sample(1:20, 9)), NA))
(y <- c(sort(sample(3:23, 7)), NA))
union(x, y)
intersect(x, y)
setdiff(x, y)
setdiff(y, x)
setequal(x, y)
x <- c(1, 2, 3, 4)
y <- c(2, 3, 4, 5)
setdiff(x, y)
setdiff(y, x)
y <- c(3, 4)
setdiff(x, y)
setdiff(y, x)
y <- (22)
y <- c(22)
setdiff(x, y)
setdiff(y, x)
(frenki.mito$UniProt %in% cafa.mito$UniProt)
!(frenki.mito$UniProt %in% cafa.mito$UniProt
)
frenki.mito <- frenki.mito[!(frenki.mito$UniProt %in% cafa.mito$UniProt), ]
tp <- intersect(radni$Protein, frenki.mito$UniProt)
tp <- as.data.frame(intersect(radni$Protein, frenki.mito$UniProt))
View(tp)
names(tp) <- c("UniProt")
fp <- as.data.frame(setdiff(frenki.mito$UniProt, tp$UniProt))
47+2715
t.pos <- as.data.frame(intersect(radni$Protein, frenki.mito$UniProt)) # tp=47
names(t.pos) <- c("UniProt")
tp <- dim(t.pos)
tp <- dim(t.pos)[1]
f.pos <- as.data.frame(setdiff(frenki.mito$UniProt, t.pos$UniProt)) # fp=2715
fp <- dim(f.pos)[1] # fp=2715
f.neg <- as.data.frame(setdiff(radni$Protein, t.pos$UniProt))
fn <- dim(f.neg)[1]
2398+47
duplicated(radni$Protein)
anyDuplicated(radni$Protein)
anyDuplicated(frenki[frenki$Predikcija == go, ]$Uniprot1)
anyDuplicated(frenki[frenki$Predikcija == go, ]$UniProt2)
anyDuplicated(frenki[frenki$Predikcija == go, ]$UniProt)
radni.uni <- radni[!(duplicated(radni$Protein)), ]
2445-2827
2827-2445
sum(duplicated(radni$Protein))
levels(radni$Protein)
radni.uni <- droplevels(radni.uni$Protein)
radni.uni <- radni[!(duplicated(radni$Protein)), ]
radni.uni$Protein <- droplevels(radni.uni)$Protein
View(radni.uni)
f.neg <- as.data.frame(setdiff(radni.uni$Protein, t.pos$UniProt))
fn <- dim(f.neg)[1] # fn = 2398
t.pos <- as.data.frame(intersect(radni.uni$Protein, frenki.mito$UniProt))
names(t.pos) <- c("UniProt")
tp <- dim(t.pos)[1] # tp = 47
f.pos <- as.data.frame(setdiff(frenki.mito$UniProt, t.pos$UniProt))
fp <- dim(f.pos)[1] # fp = 2715
f.neg <- as.data.frame(setdiff(radni.uni$Protein, t.pos$UniProt))
precision <- tp/(tp+fn)
prec <- tp/(tp+fn)
rm(precision)
prec <- tp/(tp+fp)
rec <- tp/(tp+fn)
f <- 2*prec*rec/(prec+rec)
sum(duplicated(radni$Protein))
anyDuplicated(radni$Protein)
View(radni)
sum(duplicated(frenki$UniProt))
47+2715
7+2398
47+2398
rm(list = ls())
# impi sa mitominera
impi <- read.table("Data/impi_mitominer.tsv", sep = "\t", header = F,
col.names = c("Protein", "Gene.ID", "Gene", "Status"))
View(impi)
sum(duplicated(impi))
View(impi)
View(impi$Protein)
sum(duplicated(impi$Protein))
anyDuplicated(impi$Protein)
str(impi)
3650+1755
View(impi[duplicated(impi$Protein), ])
# svi geni u impiju
impi_genes <- as.data.frame(levels(impi$Gene.ID))
# cafa training set
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t",
col.names = c("Protein", "Ontology"))
# lista svih proteina u cafi posto se u cafa ponavljaju zbog ontologija
cafa_proteini <- as.data.frame(levels(cafa$Protein))
cafa_proteini[, 2] <- cafa_proteini[, 2] <- "Da"
names(cafa_proteini) <- c("Protein", "CAFA")
# listi impi proteina dodaje informaciju da li su u cafa training datasetu
impi_u_cafi <- merge(impi, cafa_proteini, by = "Protein", all.x = T)
table(impi_u_cafi$CAFA == "Da")
write.table(impi_u_cafi, "Data/impi_info_u_cafi.txt", sep = "\t", quote = F,
col.names = T, row.names = F)
# pravi listu proteina iy impija koji su u cafa training daatsetu
u_cafi <- subset(impi_u_cafi, impi_u_cafi$CAFA == "Da")
write.table(u_cafi, "Data/samo_impi_u_cafi.txt", sep = "\t", quote = F,
col.names = T, row.names = T)
radni <- subset(impi_u_cafi, is.na(impi_u_cafi$CAFA == "Ne"))
View(radni[duplicated(radni$Protein), ])
rm(list = ls())
frenki <- read.table("Data/FRENKI_CC_predikcije_propagirano.txt", header = F,
sep= "\t", col.names = c("CAFA", "Predikcija", "Skor"))
rm(frenki)
pan <- read.table("Data/pannzer_rezultati.txt", sep = "\t", header = T)
View(pan)
pan_cc <- subset(pann, pann$type == "CC_ARGOT")
pan_cc <- subset(pan, pan$type == "CC_ARGOT")
View(pan_cc)
pan.cc <- subset(pan, pan$type == "CC_ARGOT")
rm(pan_cc)
pan.mito <- pan.cc[pan.cc$id == "0005739", ]
View(pan.mito)
rm(list = ls())
pan <- read.table("Data/pannzer_go_rezultati.txt", sep = "\t", header = T)
View(pan)
pan.cc <- subset(pan, pan$ontology == "CC")
pan.mito <- pan.cc[pan.cc$id == "5739", ]
pan.mito <- pan.cc[pan.cc$goid == "5739", ]
View(pan.mito)
panz<- pan
for (i in c(1: length(panz$qpid))){
a = length(panz[i, 1])
panz[i, 1] = panz[i, 1][c(1:a)]
}
panz<- pan
for (i in c(1: length(panz$qpid))){
a = length(panz[i, 1])
panz[i, 1] = panz[i, 1][c(11:a)]
}
pan <- read.table("Data/pannzer_go_rezultati.txt", sep = "\t", header = T)
panz<- pan
for (i in c(1: length(panz$qpid))){
a = length(panz[i, 1])
panz[i, 1] = panz[i, 1][c(11:a)]
}
panz[i, 1]
panz[i, 1]
panz$qpid <- as.character(panz$qpid)
for (i in c(1: length(panz$qpid))){
a = length(panz[i, 1])
panz[i, 1] = panz[i, 1][c(11:a)]
}
panz[i, 1]
length(panz[i, 1])
length(panz$qpid
)
nchar(panz[i, 1])
for (i in c(1: length(panz$qpid))){
a = nchar(panz[i, 1])
panz[i, 1] = panz[i, 1][c(11:a)]
}
panz[i, 1]
panz[i, 1][c(11:a)]
panz[i, 1],
panz[i, 1]
substr(panz[i, 1], 11, a)
?regexpr
