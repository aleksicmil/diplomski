View(f.pos)
f.tp <- radni.cisto[radni.cisto$UniProt %in% t.pos$UniProt, ]
View(f.tp)
f.tp[, 3] <- "tp"
names(f.tp)[3] <- "Guess"
f.fn <- radni.cisto[radni.cisto$UniProt %in% f.neg$UniProt, ]
f.fn[, 3] <- "fn"
names(f.fn)[3] <- "Guess"
f.res <- rbind(f.tp, f.fn)
f.res[ ,4] <- "FRENKI"
names(f.res)[4] <- c("Alg")
View(f.res)
f.fp <- frenki.mito[frenki.mito$UniProt %in% f.pos$UniProt, ]
View(f.fp)
impi <- read.table("Data/All_mito_info.txt", sep = "\t", header = T)
impi.prot <- read.table("Data/impi_mapirano.tab", sep = "\t", header = T)
names(impi.prot) <- c("Gen", "UniProt")
mito.go <- read.table("Data/GO_mitochondrion.txt", header = F, sep = "\t")
View(mito.go)
izbaci <- function (x){
x <- substr(x, 11, nchar(x))
}
mito.go$V1 <- izbaci(mito.go$V1)
mito.go$V1 <- as.character(mito.go$V1)
mito.go$V1 <- izbaci(mito.go$V1)
presek <- as.data.frame(intersect(impi.prot$UniProt, mito.go$V1))
pan.proteom <- read.table("Data/Pannzer_human proteome_2.txt", header = F,
sep = "\t")
View(pan.proteom)
pan.proteom <- read.table("Data/Pannzer_human proteome_2.txt", header = T,
sep = "\t")
View(pan.proteom)
pan.proteom <- pan.proteom[pan.proteom$ontology == "CC", ]
View(pan.proteom)
write.table(pan.proteom, "Data/pan_proteom_cc.txt", quote = F,
col.names = T, row.names = F)
pan.proteom <- read.table("Data/Pannzer_human proteome_2.txt", header = T,
sep = "\t")
View(pan.proteom)
rm(list = ls())
pan.rezultati <- read.table("Data/Pannzer_human proteome_2.txt", header = T,
sep = "\t")
?memory.limit
?read.table
View(pan.rezultati)
frenki <- read.table("Data/FRENKI_CC_predikcije_propagirano.txt", header = T,
sep = "\t")
pan <- load("Data/Pannzer_human proteome_2.txt")
?load
pan <- load("Data/Pannzer_human proteome_2 - Copy.RData")
load("Data/Pannzer_human proteome_2 - Copy.RData")
pan <- read.csv("Data/Pannzer_human proteome_2.txt", sep = "\t", header = T)
View(pan)
pan.rezultati <- read.csv("Data/Pannzer_human proteome_2.txt", header = T,
sep = "\t")
View(frenki)
frenki <- read.table("Data/FRENKI_CC_predikcije_propagirano.txt", header = F,
sep = "\t")
rm(pan)
rm(f.res, p.res, f.chi, p.chi)
View(frenki)
samo.frenki <- as.data.frame(setdiff(frenki$V1, pan.rezultati$qpid))
View(samo.frenki)
names(samo.frenki) <- c("Protein")
frenki3 <- frenki[frenki$V1 %in% samo.frenki$Protein, ]
frenki3 <- frenki3[frenki3$V2 == "GO:0005739", ]
View(frenki3)
View(samo.frenki)
sum(duplicated(samo.frenki$Protein))
View(frenki3)
mapa <- read.csv("Data/CAFA_mapping.txt", sep = "\t", header = T)
View(mapa)
mapa <- read.csv("Data/CAFA_mapping.txt", sep = "\t", header = F)
frenki3 <- merge(frenki3, mapa[, c(1, 4)], by.x = "V1", by.y = "V4", all.x = T)
View(frenki3)
impi <- read.table("Data/impi_proteini_2.txt", header = T, sep = "\t")
impi <- read.table("Data/impi_proteini_mapirano_novo.txt",
header = T, sep = "\t")
impi <- read.table("Data/impi_proteini_reviewed.tab",
header = T, sep = "\t")
View(impi)
names(impi) <- c("Gen", "Protein")
names(frenki3) <- c("Cafa", "go", "Score", "Protein")
provera <- as.data.frame(intersect(impi$Protein, frenki3$Protein))
impi$Protein
frenki3$Protein
sum(frenki3$Protein %in% impi$Protein)
View(pan.rezultati)
pan.cc <- pan.rezultati[pan.rezultati$ontology == "CC", ]
samo.frenki.cc <- as.data.frame(setdiff(frenki$V1, pan.cc$qpid))
frenki4 <- frenki[frenki$V1 %in% samo.frenki.cc$Protein, ]
names(samo.frenki.cc) <- c("Protein")
frenki4 <- frenki[frenki$V1 %in% samo.frenki.cc$Protein, ]
frenki4 <- frenki4[frenki4$V2 == "GO:0005739", ]
View(frenki4)
frenki4 <- merge(frenki4, mapa[, c(1, 4)], by.x = "V1",
by.y = "V4", all.x = T)
names(frenki4) <- c("Cafa", "go", "Score", "Protein")
provera4 <- as.data.frame(intersect(impi$Protein, frenki4$Protein))
View(provera4)
View(provera4)
rm(list = ls())
pan <- read.table("Data/pan_rezultati_propagirano.txt",
sep = "\t", header = T)
rm(list = ls())
pan <- read.csv("Data/pan_rezultati_propagirano.txt", sep = "\t", header = T)
View(pan)
pan <- read.csv("Data/pan_rezultati_propagirano.txt", sep = "\t", header = F)
names(pan) <- c("Cafa", "go")
# Ucitam mapu i mapiram na UniProt imena
mapa <- read.csv("Data/CAFA_mapping.txt", sep = "\t", header = F)
View(mapa)
# Ucitam mapu i mapiram na UniProt imena
mapa <- read.table("Data/CAFA_mapping.txt", sep = "\t", header = F)
pan <- merge(pan, mapa[,c(1, 4)], by.x = "Cafa", by.y = "V4", all.x = T)
View(pan)
names(pan)[3] <- c("UniProt")
View(pan)
pan <- read.csv("Data/pan_rezultati_propagirano_bp.txt", sep = "\t", header = F)
names(pan) <- c("Cafa", "go")
pan <- merge(pan, mapa[,c(1, 4)], by.x = "Cafa", by.y = "V4", all.x = T)
names(pan)[3] <- c("UniProt")
pan.mito <- pan[pan$go == 5379, ]
pan.mito <- pan[pan$go == "5379", ]
str(pan)
pan.mito <- pan[pan$go == 5379, ]
pan.mito <- pan[pan$go == 5739, ]
View(pan.mito)
View(pan.mito)
pan <- read.csv("Data/pan_rezultati_propagirano.txt", sep = "\t", header = F)
names(pan) <- c("Cafa", "go")
pan <- merge(pan, mapa[,c(1, 4)], by.x = "Cafa", by.y = "V4", all.x = T)
names(pan)[3] <- c("UniProt")
pan.mito <- pan[pan$go == 5739, ]
View(pan.mito)
pan <- read.csv("Data/pan_rezultati_propagirano_bp.txt", sep = "\t", header = F)
names(pan) <- c("Cafa", "go")
pan <- merge(pan, mapa[,c(1, 4)], by.x = "Cafa", by.y = "V4", all.x = T)
View(pan)
pan <- read.csv("Data/Pannzer_human proteome_2.txt", sep = "\t", header = F)
rm(list = ls())
impi <- read.table("Data/All_mito_info.txt", sep = "\t", header = T)
View(impi)
View(impi)
Data/impi_mapirano.tab
impi.prot <- read.table("Data/impi_mapirano.tab", sep = "\t", header = T)
impi.prot <- read.table("Data/impi_mapirano.tab", sep = "\t", header = T)
mito.go <- read.table("Data/GO_mitochondrion.txt", header = F, sep = "\t")
View(mito.go)
izbaci <- function (x){
x <- substr(x, 11, nchar(x))
}
mito.go$V1 <- as.character(mito.go$V1)
impi.prot <- read.table("Data/impi_mapirano.tab", sep = "\t", header = T)
View(impi.prot)
names(impi.prot) <- c("Gen", "UniProt")
names(impi.prot) <- c("Gen", "UniProt")
write.table(impi.prot, "Data/impi_proteini_mapirano_novo.txt", sep = "\t",
quote = T, col.names = T, row.names = F)
mito.go <- read.table("Data/GO_mitochondrion.txt", header = F, sep = "\t")
View(mito.go)
mito.go$V1 <- as.character(mito.go$V1)
mito.go$V1 <- izbaci(mito.go$V1)
View(mito.go)
presek <- as.data.frame(intersect(impi.prot$UniProt, mito.go$V1))
pan.proteom <- read.table("Data/Pannzer_human proteome_2.txt", header = T,
sep = "\t")
View(pan.proteom)
pan.proteom <- pan.proteom[pan.proteom$ontology == "CC", ]
pan.proteom <- read.table("Data/Pannzer_human proteome_2.txt", header = T,
sep = "\t")
pan.proteom <- pan.proteom[pan.proteom$ontology == "CC", ]
pan.proteom <- read.table("Data/Pannzer_human proteome_2.txt", header = T,
sep = "\t")
View(pan.proteom)
pan.proteom <- pan.proteom[pan.proteom$ontology == "CC", ]
write.table(pan.proteom, "Data/pan_proteom_cc.txt", quote = F,
col.names = T, row.names = F)
View(pan.proteom)
rm(list = ls())
# Gene ontology - mitochondrion
go <- "GO:0005739"
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
names(cafa) <- c("UniProt", "Predikcija")
cafa.mito <- cafa[cafa$Predikcija == go, ]
names(cafa.mito) <- c("UniProt", "Predikcija")
rm(cafa)
View(cafa.mito)
# Radni dataset, proteini iz IMPI-ja koji nisu u CAFA training datasetu (2827)
radni <- read.table("Data/impi_proteini_reviewed.tab", sep = "\t",
header = T)
View(radni)
names(radni) <- c("Gen", "UniProt")
# CIscenje radnog od kafe
radni.cafa <- as.data.frame(intersect(radni$UniProt, cafa.mito$UniProt))
names(radni.cafa) <- c("UniProt")
radni.cisto <- radni[!(radni$UniProt %in% radni.cafa$UniProt), ]
View(radni.cisto)
# Frenki predikcije. Izdvojeni proteini za koje je predvidjeno
# da su mito (3163)
frenki <- read.table("Data/FRENKI_predikcije_mapirano.txt",
header = T,
sep = "\t")
frenki.mito <- frenki[frenki$Predikcija == go, ]
frenki.mito$UniProt <- droplevels(frenki.mito)$UniProt
write.table(frenki.mito, "Data/frenki.mito.txt", quote = F, col.names = T,
row.names = F, sep = "\t")
dim(frenki.mito)[1] - length(levels(frenki.mito$UniProt))
frenki.mito <- frenki.mito[!duplicated(frenki.mito$UniProt), ]
frenki.mito <- frenki.mito[!(is.na(frenki.mito$UniProt)), ]
presek <- as.data.frame(intersect(frenki.mito$UniProt, cafa.mito$UniProt))
names(presek) <- c("UniProt")
frenki.mito <- frenki.mito[!(frenki.mito$UniProt %in% cafa.mito$UniProt), ]
t.pos <- as.data.frame(intersect(radni.cisto$UniProt, frenki.mito$UniProt))
names(t.pos) <- c("UniProt")
tp <- dim(t.pos)[1] # tp = 110
f.pos <- as.data.frame(setdiff(frenki.mito$UniProt, t.pos$UniProt))
names(f.pos) <- c("UniProt")
fp <- dim(f.pos)[1] # fp = 2652
f.neg <- as.data.frame(setdiff(radni.cisto$UniProt, t.pos$UniProt))
names(f.neg) <- c("UniProt")
fn <- dim(f.neg)[1] # fn = 600
prec <- tp/(tp+fp) # 0.040
rec <- tp/(tp+fn) # 0.155
f <- 2*prec*rec/(prec+rec) # 0.063
# FRENKI EVALUACIJA ponovljeno
#_________________________________________________________________________
# UCITAVANJE DATASETOVA
# Gene ontology - mitochondrion
go <- "GO:0005739"
# Radni dataset, proteini iz IMPI-ja koji nisu u CAFA training datasetu (2827)
radni <- read.table("Data/radni_dataset.txt", sep = "\t", header = T)
radni.uni <- radni[!(duplicated(radni$Protein)), ]
radni.uni$Protein <- droplevels(radni.uni)$Protein
# Frenki predikcije. Izdvojeni proteini za koje je predvidjeno da su mito (3163)
frenki <- read.table("Data/FRENKI_predikcije_mapirano.txt",
header = T,
sep = "\t")
frenki.mito <- frenki[frenki$Predikcija == go, ]
frenki.mito$UniProt <- droplevels(frenki.mito)$UniProt
# Ucitavanje CAFA trening seta. Vadjenje samo mito proteina. (4675)
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
names(cafa) <- c("UniProt", "Predikcija")
cafa.mito <- cafa[cafa$Predikcija == go, ]
names(cafa.mito) <- c("UniProt", "Predikcija")
rm(cafa)
# _________________________________________________________________________
# CISCENJE FRENKI.MITO
# Izbacivanje duplikata iz frenki.mito
dim(frenki.mito)[1] > length(levels(frenki.mito$UniProt))
frenki.mito <- frenki.mito[!duplicated(frenki.mito$UniProt), ]
# Izbacivanje NA za UniProt iz frenki.mito
frenki.mito <- frenki.mito[!(is.na(frenki.mito$UniProt)), ]
# Izbacivanje proteina koji su bili u CAFA trening setu iz frenki.mito
presek <- as.data.frame(intersect(frenki.mito$UniProt, cafa.mito$UniProt))
names(presek) <- c("UniProt")
frenki.mito <- frenki.mito[!(frenki.mito$UniProt %in% cafa.mito$UniProt), ]
#__________________________________________________________________________
# EVALUACIJA
# True positives - broj proteina za koje je FRENKI predvideo da su mito,
#                  a nalaze se u radnom datasetu
t.pos <- as.data.frame(intersect(radni.uni$Protein, frenki.mito$UniProt))
names(t.pos) <- c("UniProt")
tp <- dim(t.pos)[1] # tp = 47
# False positives - proteini za koje je FRENKI rekao da su mitohondrijalni, a
#                   NE nalaze se u radnom. Ostatak frenki.mito kada se oduzme tp
f.pos <- as.data.frame(setdiff(frenki.mito$UniProt, t.pos$UniProt))
names(f.pos) <- c("UniProt")
fp <- dim(f.pos)[1] # fp = 2715
# False negatives - svi oni proteini koje FRENKI nije predvideo kao mito,
#                   a nalaze se u radnom. Ostatak radnog kada se oduzme tp
f.neg <- as.data.frame(setdiff(radni.uni$Protein, t.pos$UniProt))
names(f.neg) <- c("UniProt")
fn <- dim(f.neg)[1] # fn = 2398
# Precision
prec <- tp/(tp+fp) # 0.017
rec <- tp/(tp+fn) # 0.019
f <- 2*prec*rec/(prec+rec) # 0.018
# ___________________________________________
# Priprema fajlova za poredjenja algoritama
# Pravi datasetove za tp, fp i fn
f.tp <- radni.uni[radni.uni$Protein %in% t.pos$UniProt, ]
f.tp[, 6] <- "tp"
names(f.tp)[6] <- "Guess"
f.fn <- radni.uni[radni.uni$Protein %in% f.neg$UniProt, ]
f.fn[, 6] <- "fn"
names(f.fn)[6] <- "Guess"
f.res <- rbind(f.tp, f.fn)
f.res[ ,7] <- "FRENKI"
names(f.res)[7] <- c("Alg")
f.res <- f.res[, -5]
write.table(f.res, "Data/frenki_resenja_tpfn.txt", quote = F, row.names = F,
col.names = T, sep = "\t")
# False positivi se ne nalaze u radnom datasetu, ne mogu se spojiti sa tp i fn
f.fp <- frenki.mito[frenki.mito$UniProt %in% f.pos$UniProt, ]
f.fp[, 7] <- "fp"
names(f.fp)[7] <- "Guess"
write.table(f.fp, "Data/frenki_resenja_fp.txt", sep = "\t", quote = F,
col.names = T, row.names = F)
rm(list = ls())
# FRENKI EVALUACIJA ponovljeno
#_________________________________________________________________________
# UCITAVANJE DATASETOVA
# Gene ontology - mitochondrion
go <- "GO:0005739"
# Ucitavanje CAFA trening seta. Vadjenje samo mito proteina. (4675)
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
names(cafa) <- c("UniProt", "Predikcija")
cafa.mito <- cafa[cafa$Predikcija == go, ]
names(cafa.mito) <- c("UniProt", "Predikcija")
rm(cafa)
# Radni dataset, proteini iz IMPI-ja koji nisu u CAFA training datasetu (2827)
radni <- read.table("Data/impi_proteini_reviewed.tab", sep = "\t",
header = T)
names(radni) <- c("Gen", "UniProt")
# nema duplikata
# CIscenje radnog od kafe
radni.cafa <- as.data.frame(intersect(radni$UniProt, cafa.mito$UniProt))
names(radni.cafa) <- c("UniProt")
radni.cisto <- radni[!(radni$UniProt %in% radni.cafa$UniProt), ]
# Frenki predikcije. Izdvojeni proteini za koje je predvidjeno
# da su mito (3163)
frenki <- read.table("Data/FRENKI_predikcije_mapirano.txt",
header = T,
sep = "\t")
frenki.mito <- frenki[frenki$Predikcija == go, ]
frenki.mito$UniProt <- droplevels(frenki.mito)$UniProt
write.table(frenki.mito, "Data/frenki.mito.txt", quote = F, col.names = T,
row.names = F, sep = "\t")
# _________________________________________________________________________
# CISCENJE FRENKI.MITO
# Izbacivanje duplikata iz frenki.mito
dim(frenki.mito)[1] - length(levels(frenki.mito$UniProt))
frenki.mito <- frenki.mito[!duplicated(frenki.mito$UniProt), ]
# Izbacivanje NA za UniProt iz frenki.mito
frenki.mito <- frenki.mito[!(is.na(frenki.mito$UniProt)), ]
# Izbacivanje proteina koji su bili u CAFA trening setu iz frenki.mito
presek <- as.data.frame(intersect(frenki.mito$UniProt, cafa.mito$UniProt))
names(presek) <- c("UniProt")
frenki.mito <- frenki.mito[!(frenki.mito$UniProt %in% cafa.mito$UniProt), ]
#__________________________________________________________________________
# EVALUACIJA
# True positives - broj proteina za koje je FRENKI predvideo da su mito,
#                  a nalaze se u radnom datasetu
t.pos <- as.data.frame(intersect(radni.cisto$UniProt, frenki.mito$UniProt))
names(t.pos) <- c("UniProt")
tp <- dim(t.pos)[1] # tp = 110
# False positives - proteini za koje je FRENKI rekao da su mitohondrijalni, a
#                   NE nalaze se u radnom. Ostatak frenki.mito kada se oduzme tp
f.pos <- as.data.frame(setdiff(frenki.mito$UniProt, t.pos$UniProt))
names(f.pos) <- c("UniProt")
fp <- dim(f.pos)[1] # fp = 2652
# False negatives - svi oni proteini koje FRENKI nije predvideo kao mito,
#                   a nalaze se u radnom. Ostatak radnog kada se oduzme tp
f.neg <- as.data.frame(setdiff(radni.cisto$UniProt, t.pos$UniProt))
names(f.neg) <- c("UniProt")
fn <- dim(f.neg)[1] # fn = 600
# Precision
prec <- tp/(tp+fp) # 0.040
rec <- tp/(tp+fn) # 0.155
f <- 2*prec*rec/(prec+rec) # 0.063
# ___________________________________________
# Priprema fajlova za poredjenja algoritama
# Pravi datasetove za tp, fp i fn
f.tp <- radni.cisto[radni.cisto$UniProt %in% t.pos$UniProt, ]
f.tp[, 3] <- "tp"
names(f.tp)[3] <- "Guess"
f.fn <- radni.cisto[radni.cisto$UniProt %in% f.neg$UniProt, ]
f.fn[, 3] <- "fn"
names(f.fn)[3] <- "Guess"
f.res <- rbind(f.tp, f.fn)
f.res[ ,4] <- "FRENKI"
names(f.res)[4] <- c("Alg")
write.table(f.res, "Data/frenki_resenja_tpfn.txt", quote = F, row.names = F,
col.names = T, sep = "\t")
# False positivi se ne nalaze u radnom datasetu, ne mogu se spojiti sa tp i fn
f.fp <- frenki.mito[frenki.mito$UniProt %in% f.pos$UniProt, ]
f.fp[, 3] <- "fp"
names(f.fp)[7] <- "Guess"
write.table(f.fp, "Data/frenki_resenja_fp.txt", sep = "\t", quote = F,
col.names = T, row.names = F)
rm(list = ls())
impi <- read.table("Data/All_mito_info.txt", sep = "\t", header = T)
write.table(impi$Gene.ID, "Data/impi_geni.txt", sep = "\t", col.names = F,
quote = F, row.names = F) #ens anotacije
Data/impi_geni.txt
View(impi)
impi.prot <- read.table("Data/impi_mapirano.tab", sep = "\t", header = T)
View(impi.prot)
rm(list = ls())
radni <- read.table("Data/impi_proteini_reviewed.tab", header = T, sep = "\t")
radni <- radni[!duplicated(radni$UniProt), ]
go <- read.table("Data/GO_mitochondrion.txt", header = F, sep = "\t")
radni.go <- radni[!(radni$UniProt %in% go$V1), ]
rm(list = ls())
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
names(cafa) <- c("UniProt", "Predikcija")
cafa.mito <- cafa[cafa$Predikcija == go, ]
names(cafa.mito) <- c("UniProt", "Predikcija")
rm(cafa)
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
names(cafa) <- c("UniProt", "Predikcija")
# Gene ontology - mitochondrion
go <- "GO:0005739"
cafa.mito <- cafa[cafa$Predikcija == go, ]
names(cafa.mito) <- c("UniProt", "Predikcija")
rm(cafa)
# Radni dataset, proteini iz IMPI-ja koji nisu u CAFA training datasetu (2827)
radni <- read.table("Data/impi_proteini_reviewed.tab", sep = "\t",
header = T)
names(radni) <- c("Gen", "UniProt")
# CIscenje radnog od kafe
radni.cafa <- as.data.frame(intersect(radni$UniProt, cafa.mito$UniProt))
names(radni.cafa) <- c("UniProt")
radni.cisto <- radni[!(radni$UniProt %in% radni.cafa$UniProt), ]
# FRENKI EVALUACIJA ponovljeno
#_________________________________________________________________________
# UCITAVANJE DATASETOVA
# Gene ontology - mitochondrion
go <- "GO:0005739"
# Ucitavanje CAFA trening seta. Vadjenje samo mito proteina. (4675)
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
names(cafa) <- c("UniProt", "Predikcija")
cafa.mito <- cafa[cafa$Predikcija == go, ]
names(cafa.mito) <- c("UniProt", "Predikcija")
rm(cafa)
# Radni dataset, proteini iz IMPI-ja koji nisu u CAFA training datasetu (2827)
radni <- read.table("Data/impi_proteini_reviewed.tab", sep = "\t",
header = T)
names(radni) <- c("Gen", "UniProt")
# nema duplikata
# CIscenje radnog od kafe
radni.cafa <- as.data.frame(intersect(radni$UniProt, cafa.mito$UniProt))
names(radni.cafa) <- c("UniProt")
radni.cisto <- radni[!(radni$UniProt %in% radni.cafa$UniProt), ]
# Frenki predikcije. Izdvojeni proteini za koje je predvidjeno
# da su mito (3163)
frenki <- read.table("Data/FRENKI_predikcije_mapirano.txt",
header = T,
sep = "\t")
frenki.mito <- frenki[frenki$Predikcija == go, ]
frenki.mito$UniProt <- droplevels(frenki.mito)$UniProt
write.table(frenki.mito, "Data/frenki.mito.txt", quote = F, col.names = T,
row.names = F, sep = "\t")
# _________________________________________________________________________
# CISCENJE FRENKI.MITO
# Izbacivanje duplikata iz frenki.mito
dim(frenki.mito)[1] - length(levels(frenki.mito$UniProt))
frenki.mito <- frenki.mito[!duplicated(frenki.mito$UniProt), ]
# Izbacivanje NA za UniProt iz frenki.mito
frenki.mito <- frenki.mito[!(is.na(frenki.mito$UniProt)), ]
# Izbacivanje proteina koji su bili u CAFA trening setu iz frenki.mito
presek <- as.data.frame(intersect(frenki.mito$UniProt, cafa.mito$UniProt))
names(presek) <- c("UniProt")
frenki.mito <- frenki.mito[!(frenki.mito$UniProt %in% cafa.mito$UniProt), ]
#__________________________________________________________________________
# EVALUACIJA
# True positives - broj proteina za koje je FRENKI predvideo da su mito,
#                  a nalaze se u radnom datasetu
t.pos <- as.data.frame(intersect(radni.cisto$UniProt, frenki.mito$UniProt))
names(t.pos) <- c("UniProt")
tp <- dim(t.pos)[1] # tp = 110
# False positives - proteini za koje je FRENKI rekao da su mitohondrijalni, a
#                   NE nalaze se u radnom. Ostatak frenki.mito kada se oduzme tp
f.pos <- as.data.frame(setdiff(frenki.mito$UniProt, t.pos$UniProt))
names(f.pos) <- c("UniProt")
fp <- dim(f.pos)[1] # fp = 2652
# False negatives - svi oni proteini koje FRENKI nije predvideo kao mito,
#                   a nalaze se u radnom. Ostatak radnog kada se oduzme tp
f.neg <- as.data.frame(setdiff(radni.cisto$UniProt, t.pos$UniProt))
names(f.neg) <- c("UniProt")
fn <- dim(f.neg)[1] # fn = 600
# Precision
prec <- tp/(tp+fp) # 0.040
rec <- tp/(tp+fn) # 0.155
f <- 2*prec*rec/(prec+rec) # 0.063
# ___________________________________________
# Priprema fajlova za poredjenja algoritama
# Pravi datasetove za tp, fp i fn
f.tp <- radni.cisto[radni.cisto$UniProt %in% t.pos$UniProt, ]
f.tp[, 3] <- "tp"
names(f.tp)[3] <- "Guess"
f.fn <- radni.cisto[radni.cisto$UniProt %in% f.neg$UniProt, ]
f.fn[, 3] <- "fn"
names(f.fn)[3] <- "Guess"
f.res <- rbind(f.tp, f.fn)
f.res[ ,4] <- "FRENKI"
names(f.res)[4] <- c("Alg")
write.table(f.res, "Data/frenki_resenja_tpfn.txt", quote = F, row.names = F,
col.names = T, sep = "\t")
# False positivi se ne nalaze u radnom datasetu, ne mogu se spojiti sa tp i fn
f.fp <- frenki.mito[frenki.mito$UniProt %in% f.pos$UniProt, ]
f.fp[, 3] <- "fp"
names(f.fp)[7] <- "Guess"
write.table(f.fp, "Data/frenki_resenja_fp.txt", sep = "\t", quote = F,
col.names = T, row.names = F)
install.packages('VennDiagram')
library(VennDiagram)
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
View(cafa)
View(cafa)
rm(list = ls())
# Gene ontology - mitochondrion
go <- "GO:0005739"
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
names(cafa) <- c("UniProt", "Predikcija")
cafa.mito <- cafa[cafa$Predikcija == go, ]
names(cafa.mito) <- c("UniProt", "Predikcija")
rm(cafa)
?duplicated()
duplicated(cafa.mito$UniProt)
sum(duplicated(cafa.mito$UniProt))
