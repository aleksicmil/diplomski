for(i in 1:1548){
'lakeg'
}
for(i in 1:1548){
if (impi$DisCol[i] == "black"){
impi$DisCol[i] = 1
else impi$DisCol[i] = 0}}
for(i in 1:1548){
if (impi$DisCol[i] == "black"){
impi$DisCol[i] = 1}
else impi$DisCol[i] = 0}
impi <- read.table("Data/All_mito_info.txt", sep = "\t", header = T)
?if
for(i in 1:1548){
if (impi$DisCol[i] == "black"){
impi$DisCol[i] = 1
}
else{
impi$DisCol[i] = 0
}
}
for(i in 1:1548){
if (impi$DisCol[i] == "black")
impi$DisCol[i] = 1
else
impi$DisCol[i] = 0
}
impi <- read.table("Data/All_mito_info.txt", sep = "\t", header = T)
for(i in 1:1548){
if (impi$DisCol[i] == "black")
impi$DisCol[i] = 1
else
impi$DisCol[i] = 0
}
warnings()
View(impi)
impi <- read.table("Data/All_mito_info.txt", sep = "\t", header = T)
for(i in 1:1548){
if (impi$DisCol[i] == "black")
impi$DisCol[i] = 1
else
impi$DisCol[i] = 0
}
impi <- read.table("Data/All_mito_info.txt", sep = "\t", header = T)
impi <- read.table("Data/All_mito_info.txt", sep = "\t", header = T)
type(impi$DisCol)
impi <- read.table("Data/All_mito_info.txt", sep = "\t", header = T)
for(i in 1:1548){
if (impi$DisCol[i] == "black")
impi$DisCol[i] = '1'
else
impi$DisCol[i] = '0'
}
warnings()
impi <- read.table("Data/All_mito_info.txt", sep = "\t", header = T)
(impi$DisCol)
names(impi)
impi <- read.table("Data/All_mito_info.txt", sep = "\t", header = T)
for(i in 1:1548){
if (impi[i, 13] == "black")
impil[i, 13] = 1
else
impi[i, 13] = 0
}
impi <- read.table("Data/All_mito_info.txt", sep = "\t", header = T)
for(i in 1:1548){
if (impi[i, 13] == "black")
impi[i, 13] = 1
else
impi[i, 13] = 0
}
warnings()
impi$DisCol <- as.character(impi$DisCol)
for(i in 1:1548){
if (impi[i, 13] == "black")
impi[i, 13] = 1
else
impi[i, 13] = 0
}
impi <- read.table("Data/All_mito_info.txt", sep = "\t", header = T)
impi$DisCol <- as.character(impi$DisCol)
for(i in 1:1548){
if (impi[i, 13] == "black")
impi[i, 13] = 1
else
impi[i, 13] = 0
}
names(impi)
impi <- impi[, -c(14)]
names(impi)
names(impi$DisCol) <- "Disease"
names(impi)
names(impi$DisCol) <- c("Disease")
names(impi$DisCol) <- c("Disease")
names(impi)
names(impi$DisCol)
names(impi)[, "DisCol"]
names(impi)[13]
names(impi)[13] <- c("Disease")
names(impi)
write.table(impi, "Data/All_mito_info.txt", sep = "\t", col.names = T,
row.names = T)
impi <- read.table("Data/All_mito_info.txt", sep = "\t", header = T)
View(impi)
names(impi)
impi <- impi[, -14]
names(impi)
write.table(impi, "Data/All_mito_info.txt", sep = "\t", col.names = T,
row.names = T)
impi <- read.table("Data/All_mito_info.txt", sep = "\t", header = T)
impi <- read.table("Data/All_mito_info.txt", sep = "\t", header = T)
View(impi)
cafa <- read.table("Data/trening_cafa_C_ext.txt", sep = "\t", header = F,
col.names = c("Protein", "Ontology"))
impi_protein <- read.csv("Data/impi_protein.csv", header = F,
col.names = "Protein")
impi_oba <- read.table("Data/impi_UniProt_to_ENSG.txt", header = T, sep = "\t")
sum(impi_protein$Protein %in% levels(cafa$Protein))
novo <- merge(impi, impi_oba, by.x = "Gene.ID", by.y = "To", all.x = T)
View(novo)
novo <- merge(impi, impi_oba, by.x = "Gene.ID", by.y = "To")
novo_GO <- merge(novo, cafa, by.x = "From", by.y = "Protein", all.x = T)
View(novo_GO)
cafa_protein <- levels(cafa$Protein)
cafa_protein[, 2] <- "Da"
cafa_protein <- as.character(levels(cafa$Protein))
cafa_protein <- as.list(levels(cafa$Protein))
View(cafa_protein)
rm(cafa_protein)
cafa_protein <- as.data.frame(levels(cafa$Protein))
View(cafa_protein)
names(cafa_protein) <- c("Protein", "CAFA")
cafa_protein[, 2] <- "da"
names(cafa_protein) <- c("Protein", "CAFA")
View(cafa_protein)
novo_cafa <- merge(novo, cafa_protein, by.x = "From", by.y = "Protein",
all.x = T)
View(novo_cafa)
table(novo_cafa$CAFA != NA)
table(novo_cafa$CAFA <> NA)
table(novo_cafa$CAFA != NA)
table(novo_cafa$CAFA != "da")
sum(novo_cafa$CAFA)
names(impi_oba) <- c("Protein", "Gene.ID")
write.table(impi_oba, "Data/impi_UniProt_to_ENSG.txt", row.names = F,
col.names = T)
impi_oba <- read.table("Data/impi_UniProt_to_ENSG.txt", header = T, sep = "\t")
View(impi_oba)
write.table(impi_oba, "Data/impi_UniProt_to_ENSG.txt", row.names = F,
col.names = T, sep = "\t")
impi_oba <- read.table("Data/impi_UniProt_to_ENSG.txt", header = T, sep = "\t")
impi_oba <- read.table("Data/impi_UniProt_to_ENSG.txt", header = T, sep = "\t")
View(impi_oba)
novo <- merge(impi, impi_oba, by = "Gene.ID")
View(impi)
View(impi_oba)
impi_oba <- read.table("Data/impi_UniProt_to_ENSG.txt", header = T, sep = "\t")
novo <- merge(impi, impi_oba, by = "Gene.ID")
novo_GO <- merge(novo, cafa, by = "Protein", all.x = T)
novo_cafa <- merge(novo, cafa_protein, by = "Protein", all.x = T)
View(novo_cafa)
View(impi_oba)
View(impi_protein)
View(novo)
View(novo_GO)
View(novo_cafa)
View(novo_GO)
View(novo_cafa)
View(novo_cafa)
table(novo_cafa$CAFA == "da")
write.table(impi$Gene.ID, "Data/impi_ensg.txt", col.names = F, row.names = F,
quote = F)
View(novo)
impi <- read.table("Data/impi_mitominer.tsv", sep = "\t", header = F,
col.names = c("Protein", "Gene.ID", "Gene", "Status"))
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t",
col.names = c("Protein", "Ontology"))
cafa_proteini <- as.data.frame(levels(cafa$Protein))
cafa_proteini[, 2] <- cafa_proteini[, 2] <- "Da"
names(cafa_proteini) <- c("Protein", "CAFA")
provera <- merge(impi, cafa_proteini, by = "Protein", all.x = T)
table(provera$CAFA == "Da")
impi_geni <- as.data.frame(levels(impi$Gene.ID))
u_cafi <- subset(provera, provera$CAFA == "Da")
rm(list = ls())
# impi sa mitominera
impi <- read.table("Data/impi_mitominer.tsv", sep = "\t", header = F,
col.names = c("Protein", "Gene.ID", "Gene", "Status"))
View(impi)
levels(impi$Gene.ID)
impi_genes <- as.data.frame(levels(impi$Gene.ID))
# cafa training set
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t",
col.names = c("Protein", "Ontology"))
# lista svih proteina u cafi posto se u cafa ponavljaju zbog ontologija
cafa_proteini <- as.data.frame(levels(cafa$Protein))
cafa_proteini[, 2] <- cafa_proteini[, 2] <- "Da"
names(cafa_proteini) <- c("Protein", "CAFA")
provera <- merge(impi, cafa_proteini, by = "Protein", all.x = T)
View(provera)
table(provera$CAFA == "Da")
rm(provera)
impi_u_cafi <- merge(impi, cafa_proteini, by = "Protein", all.x = T)
rm(impi_u_cafi)
impi_u_cafi <- merge(impi, cafa_proteini, by = "Protein", all.x = T)
table(provera$CAFA == "Da")
table(impi_u_cafi$CAFA == "Da")
u_cafi <- subset(provera, provera$CAFA == "Da")
u_cafi <- subset(impi_u_cafi, provera$CAFA == "Da")
u_cafi <- subset(impi_u_cafi, impi_u_cafi$CAFA == "Da")
View(u_cafi)
write.table(impi_u_cafi, "Data/impi_info_u_cafi.txt", sep = "\t", quote = T,
col.names = T, row.names = F)
write.table(u_cafi, "Data/samo_impi_u_cafi.txt", sep = "\t", quote = T,
col.names = T, row.names = )
write.table(impi_u_cafi, "Data/impi_info_u_cafi.txt", sep = "\t", quote = F,
col.names = T, row.names = F)
write.table(u_cafi, "Data/samo_impi_u_cafi.txt", sep = "\t", quote = F,
col.names = T, row.names = )
radni <- subset(impi_u_cafi, is.na(impi_u_cafi$CAFA == "Ne"))
View(radni)
View(u_cafi)
col.names = T, row.names = T
write.table(u_cafi, "Data/samo_impi_u_cafi.txt", sep = "\t", quote = F,
col.names = T, row.names = T)
write.table(radni, "Data/radni_dataset.txt", sep = "\t", quote = F,
col.names = T, row.names = T)
frenki <- read.table("Data/FRENKI_CC_predikcije_propagirano.txt", header = F,
sep= "\t", col.names = c("CAFA", "Predikcija", "Skor"))
View(frenki)
mapa <- read.table("Data/CAFA_mapping.txt", head <- F, sep = "\t",
col.names = c("UniProt", "Uniprot1", "UniProt2", "CAFA"))
View(mapa)
frenki_score <- merge(frenki, mapa, by = "CAFA", all.x = T)
View(frenki_score)
write.table(frenki_score, "Data/FRENKI_predikcije_mapirano.txt", sep = "\t",
row.names = F, col.names = T, quote = F)
rm(ls(list = T))
rm(ls(list = ""))
rm(list = ls())
radni <- read.table("Data/radni_dataset.txt", sep = "\t", header = T)
View(radni)
frenki <- read.table("Data/FRENKI_predikcije_mapirano.txt", sep = "\t",
header = T)
table(frenki$Predikcija == "GO:0005739")
mito_frenki <- subset(frenki, frenki$Predikcija == "GO:0005739")
View(mito_frenki)
provera <- merge(radni, mito_frenki, by.x = "Protein", by.x = "UniProt")
View(mito_frenki)
provera <- merge(radni, mito_frenki, by.x = "Protein", by.x = "UniProt")
provera <- merge(radni, mito_frenki, by.x = "Protein", by.y = "UniProt")
View(provera)
provera <- merge(radni, frenki, by.x = "Protein", by.y = "UniProt")
View(provera)
provera <- merge(radni, frenki, by.x = "Protein", by.y = "UniProt", all.x = T)
provera <- merge(radni, frenki, by.x = "Protein", by.y = "UniProt")
View(frenki)
frenki_proteini<- as.data.frame(levels(frenki$UniProt))
View(frenki_proteini)
provera <- merge(radni, frenki_proteini, by.x = "Protein", by.y = "UniProt")
names(frenki_proteini) <- c("UniProt")
provera <- merge(radni, frenki_proteini, by.x = "Protein", by.y = "UniProt")
go <- "GO:0005739"
rm(provera, mito_frenki)
tp <- merge(radni, frenki$Predikcija == go, by.x = "Protein",
by.y = "UniProt")
frenki$Predikcija == go
tp <- merge(radni, frenki[frenki$Predikcija == go,], by.x = "Protein",
by.y = "UniProt")
View(tp)
?%in%
?in
frenki$UniProt %in% radni$Protein
table(frenki$UniProt %in% radni$Protein)
# False positives <- nema ga u IMPIju, a FRENKI kaze da je mito
fp <- frenki[!(frenki$UniProt %in% radni$Protein),][frenki$Predikcija == go,]
View(fp)
# False positives <- nema ga u IMPIju, a FRENKI kaze da je mito
fp1 <- subset(frenki, !(frenki$UniProt %in% radni$Protein))
View(fp1)
fp2 <- merge(fp1, radni, by.x = "UniProt", by.y = "Protein")
rm(fp1, fp2)
provera <- merge(fp, radni, by.x = "UniProt", by.y = "Protein")
table(fp$Predikcija == go)
# False positives <- nema ga u IMPIju, a FRENKI kaze da je mito
fp <- frenki[!(frenki$UniProt %in% radni$Protein),]
fp <- fp[fp$Predikcija == go]
# False positives <- nema ga u IMPIju, a FRENKI kaze da je mito
fp <- frenki[!(frenki$UniProt %in% radni$Protein),]
fp <- fp[fp$Predikcija == go,]
table(fp$Predikcija == go)
rm <- provera
rm(rm, provera)
# False negatives <- ima ga u IMPIju a za FRENKIja nije mitohondrijalni
fn <- radni[!(radni$Protein %in% tp$Protein),]
precision <- 91/(91+3116)
recall <- 91/(91+2736)
f <- 2*precision*recall/(precision+recall)
radni_u_frenkiju <- merge(radni, frenki, by.x = "Protein", by.y = "UniProt")
radni_u_frenkiju <- radni[radni$Protein %in% frenki_proteini$UniProt,]
table(radni_u_frenkiju$Predikcija == go)
frenki_mito <- frenki[frenki$Predikcija == go,]
str(grenki)
str(frenki)
# True positives <- i FRENKI i IMPI tvrde da je protein mitohondrijalni
tp <- merge(radni, frenki[frenki$Predikcija == go,], by.x = "Protein",
by.y = "UniProt")
str(tp)
# False positives <- nema ga u IMPIju, a FRENKI kaze da je mito
fp <- frenki[!(frenki$UniProt %in% radni$Protein),]
662+581191
# False positives <- nema ga u IMPIju, a FRENKI kaze da je mito
fp <- frenki[!(frenki$UniProt %in% radni$Protein),]
proba1 <- merge(fp, radni, by.x = "UniProt", by.y = "Perotein")
proba1 <- merge(fp, radni, by.x = "UniProt", by.y = "Protein")
fp <- frenki[!(frenki$UniProt %in% radni$Protein),]
rm(proba1)
fp <- fp[fp$Predikcija == go,]
View(radni_u_frenkiju)
radni_u_frenkiju <- merge(frenki, radni, by.y = "UniProt", by.x = "Protein")
radni_u_frenkiju <- merge(frenki, radni, by.x = "UniProt", by.y = "Protein")
View(radni_u_frenkiju)
table(radni_u_frenkiju$Predikcija = go)
table(radni_u_frenkiju$Predikcija == go)
provera <- merge(radni_u_frenkiju, fp, by = "Uniprot1")
View(provera)
provera <- merge(radni_u_frenkiju, fp, by = "Uniprot2")
provera <- merge(radni_u_frenkiju, fp, by = "UniProt2")
table(tp$Status)
table(radni$Status)
?chisq.test
?as.matrix
t1 <- table(tp$Status)
t2 <- table(radni$Status)
t <- rbind(t1, t2)
t
?chisq.test
chisq.test(t)
chisq.test(t, p.adjust = "bonferroni")
chisq.test(t, p.adjust("bonferroni"))
35/56
897/1930
# False negatives <- ima ga u IMPIju a za FRENKIja nije mitohondrijalni
fn <- radni[!(radni$Protein %in% tp$Protein),]
levels(fp$UniProt)
fp <- as.data.frame(fp[fp$Predikcija == go,])
levels(fp$UniProt)
fp$UniProt <- as.factor(as.character(fp$UniProt))
dim(fp)
str(fp)
# False positives <- nema ga u IMPIju, a FRENKI kaze da je mito
fp <- frenki[frenki$Predikcija == go, ]
# False positives <- nema ga u IMPIju, a FRENKI kaze da je mito
fp <- frenki[frenki$Predikcija == go, ]
fp <- frenki[!(frenki$UniProt %in% radni$Protein),]
# False positives <- nema ga u IMPIju, a FRENKI kaze da je mito
fp <- frenki[frenki$Predikcija == go, ]
# False positives <- nema ga u IMPIju, a FRENKI kaze da je mito
fp <- frenki[frenki$Predikcija == go, ]
fp <- fp[!(fp$UniProt %in% radni$Protein),]
# False positives <- nema ga u IMPIju, a FRENKI kaze da je mito
fp <- frenki[frenki$Predikcija == go, ]
fp <- fp[!(fp$UniProt %in% radni$Protein),]
fp <- frenki_mito[!(frenki_mito$UniProt %in% tp$Protein]
fp <- frenki_mito[!(frenki_mito$UniProt %in% tp$Protein)]
fp <- frenki_mito[!(frenki_mito$UniProt %in% tp$Protein),]
# True positives <- i FRENKI i IMPI tvrde da je protein mitohondrijalni
tp <- merge(radni, frenki_mito, by.x = "Protein", by.y = "UniProt")
# False negatives <- ima ga u IMPIju a za FRENKIja nije mitohondrijalni
fn <- radni[!(radni$Protein %in% tp$Protein),]
fn <- fn[fn$Protein %in% frenki$UniProt,]
recall <- 91/(91+571)
f <- 2*precision*recall/(precision+recall)
length(fn)
nrow(fn)
precision <- nrow(tp)/(nrow(tp)+nrow(fp))
recall <- nrow(tp)/(nrow(tp)+nrow(fn))
f <- 2*precision*recall/(precision+recall)
impi <- read.table("Data/impi_mitominer.tsv", header = T, sep = "\t", quote = F )
impi <- read.table("Data/impi_mitominer.tsv", header = T, sep = "\t", quote = "")
View(impi)
# Proteini iy IMPIja koji _nisu_ u CAFA training seti
radni <- read.table("Data/radni_dataset.txt", sep = "\t", header = F)
# Proteini iy IMPIja koji _nisu_ u CAFA training seti
radni <- read.table("Data/radni_dataset.txt", sep = "\t", header = T)
impi <- read.table("Data/impi_mitominer.tsv", header = F, sep = "\t", quote = "")
fn1 <- impi[!(impi$V1 %in% tp$Protein),]
fp1 <- frenki_mito[!(frenki_mito$UniProt %in% impi$V1)]
fp1 <- frenki_mito[!(frenki_mito$UniProt %in% impi$V1),]
precision <- nrow(tp)/(nrow(tp)+nrow(fp1))
recall <- nrow(tp)/(nrow(tp)+nrow(fn))
f <- 2*precision*recall/(precision+recall)
tp1 <- merge(impi, frenki_mito, by.x = "V1", by.y = "UniProt")
cafa <- read.table("Data/trening_cafa_C_ext.txt", sep = "\t", header = F)
View(cafa)
presek <- merge(frenki, cafa, by.x = "UniProt", by.y = "V2")
presek <- merge(frenki, cafa, by.x = "UniProt", by.y = "V1")
mapa <- read.table("Data/CAFA_mapping.txt", head <- F, sep = "\t",
col.names = c("UniProt", "Uniprot1", "UniProt2", "CAFA"))
frenki <- read.table("Data/FRENKI_CC_predikcije_propagirano.txt", header = F,
sep= "\t", col.names = c("CAFA", "Predikcija", "Skor"))
frenki_score <- merge(frenki, mapa, by = "CAFA", all.x = T)
View(frenki)
rm(list = ls())
# Gene Ontologija mitochondrion
go <- "GO:0005739"
# Proteini iy IMPIja koji _nisu_ u CAFA training setu
radni <- read.table("Data/radni_dataset.txt", sep = "\t", header = T)
# Predvidjeni i poznati proteini u IMPIJU (svi)
impi <- read.table("Data/impi_mitominer.tsv", header = F, sep = "\t", quote = "")
# FRENKI predikcije, propagirano do najstarije ontologije, mapirano na UniProt
frenki <- read.table("Data/FRENKI_predikcije_mapirano.txt", sep = "\t",
header = T)
# Lista svih proteina koji postoje u FRENKI predikcijama
frenki_proteini<- as.data.frame(levels(frenki$UniProt))
names(frenki_proteini) <- c("UniProt")
radni_u_frenkiju <- merge(frenki, radni, by.x = "UniProt", by.y = "Protein")
table(radni_u_frenkiju$Predikcija == go)
frenki_mito <- frenki[frenki$Predikcija == go,]
# True positives <- i FRENKI i IMPI tvrde da je protein mitohondrijalni
tp <- merge(radni, frenki_mito, by.x = "Protein", by.y = "UniProt")
tp1 <- merge(impi, frenki_mito, by.x = "V1", by.y = "UniProt")
# False positives <- nema ga u IMPI benchmarku (radnom datasetu),
# a FRENKI kaze da je mito
fp <- frenki_mito[!(frenki_mito$UniProt %in% tp$Protein),]
# False positives 1 - svi mitohondrijalni FRENKI proteini koji nisu UOPSTE u IMPI
fp1 <- frenki_mito[!(frenki_mito$UniProt %in% impi$V1),]
fn <- radni[!(radni$Protein %in% tp$Protein),]
fn <- fn[fn$Protein %in% frenki$UniProt,]
precision <- nrow(tp)/(nrow(tp)+nrow(fp1))
recall <- nrow(tp)/(nrow(tp)+nrow(fn))
f <- 2*precision*recall/(precision+recall)
frenki
View(frenki)
cafa <- read.table("Data/trening_cafa_C_ext.txt", sep = "\t", header = F)
frenki_pravo <- frenki[!(frenki$UniProt %in% cafa$V1),]
## Gene Ontologija mitochondrion
go <- "GO:0005739"
## Proteini iz IMPIja koji _nisu_ u CAFA training setu
radni <- read.table("Data/radni_dataset.txt", sep = "\t", header = T)
#table(radni$Status)
# ## Predvidjeni i poznati proteini u IMPIJU (svi)
# impi <- read.table("Data/impi_mitominer.tsv", header = F, sep = "\t", quote = "")
# table(impi$V4)
## FRENKI predikcije, propagirano do najstarije ontologije, mapirano na UniProt
frenki <- read.table("Data/FRENKI_predikcije_mapirano.txt", sep = "\t",
header = T)
## Lista svih proteina koji postoje u FRENKI predikcijama
frenki_proteini<- as.data.frame(levels(frenki$UniProt))
names(frenki_proteini) <- c("UniProt")
## Da li se u FRENKI listi koju sam upravu ucitala nalaze proteini iz
## training dataseta?
cafa <- read.table("Data/trening_cafa_C_ext.txt", sep = "\t", header = F)
names(cafa) <- c("UniProt", "GO")
cafa_proteini <- as.data.frame(levels(cafa[, 1]))
names(cafa_proteini) <- c("UniProt")
presek <- merge(frenki_proteini, cafa_proteini, by = "UniProt")
#presek nije nula, tako da ima, moram da ih izbacim
## Iz FRENKIja brise one koji su u CAFA training setu
frenki_pravo <- frenki[!(frenki$UniProt %in% cafa$UniProt),]
frenki_pravo$UniProt <- as.factor(as.character(frenki_pravo$UniProt))
frenki_pravo_proteini <- as.data.frame(levels(frenki_pravo$UniProt))
# radni_u_frenkiju <- merge(frenki, radni, by.x = "UniProt", by.y = "Protein")
#
#
# frenki_mito <- frenki[frenki$Predikcija == go,]
# frenki_pravi_mito <- frenki_pravo[frenki_pravo$Predikcija == go,]
## True positives <- i FRENKI i IMPI tvrde da je protein mitohondrijalni
tp <- merge(radni, frenki, by.x = "Protein", by.y = "UniProt")
tp <- tp[tp$Predikcija == go,]
tp1 <- merge(radni, frenki_pravo, by.x = "Protein", by.y = "UniProt")
tp1 <- tp1[tp1$Predikcija == go,]
## False positives <- u FRENKIju je mito a nema ga u radnom
fp <- frenki[frenki$Predikcija == go & !(frenki$UniProt %in% radni$Protein),]
fp1 <- frenki_pravo[frenki_pravo$Predikcija == go &
!(frenki_pravo$UniProt %in% radni$Protein),]
## False negatives <- ima ga u IMPIju a za FRENKIja nije mitohondrijalni
## (ali postoji u FRENKIju)
fn <- radni[!(radni$Protein %in% tp$Protein) & radni$Protein %in% frenki$UniProt,]
fn1 <- radni[!(radni$Protein %in% tp$Protein) &
radni$Protein %in% frenki_pravo$UniProt,]
## Evaluacija za FRENKI dataset original
precision <- nrow(tp)/(nrow(tp)+nrow(fp))
recall <- nrow(tp)/(nrow(tp)+nrow(fn))
f <- 2*precision*recall/(precision+recall)
## Evaluacija za FRENKI dataset sa izbacenim treningom iz CAFAe
precision1 <- nrow(tp1)/(nrow(tp1)+nrow(fp1))
recall1 <- nrow(tp1)/(nrow(tp1)+nrow(fn1))
f1 <- 2*precision1*recall1/(precision1+recall1)
View(frenki)
View(radni)
rm(list = ls())
read.table("Data/panzzer.txt", sep = "\t", header = T)
pan <- read.table("Data/panzzer.txt", sep = "\t", header = T)
View(pan)
radni <- read.table("Data/radni_dataset.txt", sep = "\t", header = T)
View(radni)
write.table("Data/radni_proteini.txt", radni$Protein, row.names = F, col.names = F,
sep = "\t")
prot <- radni$Protein
prot <- as.data.frame(radni$Protein)
write.table("Data/radni_proteini.txt", prot, row.names = F, col.names = F,
sep = "\t")
write.table(prot, "Data/radni_proteini.txt", row.names = F, col.names = F,
sep = "\t")
write.table(prot, "Data/radni_proteini.txt", row.names = F, col.names = F,
sep = "\t", quote = F)
mp <- read.table("Data/CAFA_mapping.txt", sep = "\t", header = T)
View(mp)
proba <- as.data.frame(mp$X1433B_HUMAN[1:50])
View(proba)
write.table(proba, "Data/probaaa.txt", col.names = F, row.names = F, quote = F)
