pan$Protein[i] <- ime(pan$qpid[i])
}
panz <- panz[, c(1, 8, 2:7)]
pan <- pan[, c(1, 8, 2:7)]
View(pan)
go <- 5739
pan.mito <- pan[pan$ontology == go, ]
pan.mito <- pan[pan$goid == go, ]
View(pan.mito)
pan.mito$Protein <- droplevels(pan.mito)$Protein
View(pan.mito)
levels(pan.mito$Protein)
pan.mito$Protein <- as.factor(pan.mito$Protein)
pan.mito$Protein <- droplevels(pan.mito)$Protein
levels(pan.mito$Protein)
radni <- read.table("Data/radni_dataset.txt", header = T, sep = "\t")
radni <- radni[!duplicated(radni$Protein), ]
t.pos <- as.data.frame(intersect(radni$Protein, pan.mito$Protein))
View(t.pos)
tp <- length(t.pos)
tp <- length(t.pos)[,1]
tp <- dim(t.pos)[1]
f.pos <- as.data.frame(setdiff(pan.mito$Protein, radni$Protein))
fp <- dim (f.pos)[1]
f.neg <- as.data.frame(setdiff(radni$Protein, pan.mito$Protein))
fn <- dim(f.neg)[1]
prec <- tp/(tp+fp)
rec <- tp/(tp+fn)
f <- 2*prec*rec/(prec+rec)
names(tp) <- c("Protein")
tp <- dim(t.pos)[1]
names(t.pos) <- c("Protein")
pog <- radni[radni$Protein %in% t.pos$Protein, ]
View(pog)
barplot(pog$Status)
table(pog$Status)
barplot(table(pog$Status))
rm(list = ls())
# FRENKI EVALUACIJA ponovljeno
#_________________________________________________________________________
# UCITAVANJE DATASETOVA
# Gene ontology - mitochondrion
go <- "GO:0005739"
# Radni dataset, proteini iz IMPI-ja koji nisu u CAFA training datasetu (2827)
radni <- read.table("Data/radni_dataset.txt", sep = "\t", header = T)
radni.uni <- radni[!(duplicated(radni$Protein)), ]
radni.uni$Protein <- droplevels(radni.uni)$Protein
# Frenki predikcije. Izdvojeni proteini za koje je predvidjeno da su mito (3163)
frenki <- read.table("Data/FRENKI_predikcije_mapirano.txt",
header = T,
sep = "\t")
frenki.mito <- frenki[frenki$Predikcija == go, ]
frenki.mito$UniProt <- droplevels(frenki.mito)$UniProt
# Ucitavanje CAFA trening seta. Vadjenje samo mito proteina. (4675)
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
names(cafa) <- c("UniProt", "Predikcija")
cafa.mito <- cafa[cafa$Predikcija == go, ]
names(cafa.mito) <- c("UniProt", "Predikcija")
rm(cafa)
# _________________________________________________________________________
# CISCENJE FRENKI.MITO
# Izbacivanje duplikata iz frenki.mito
dim(frenki.mito)[1] > length(levels(frenki.mito$UniProt))
frenki.mito <- frenki.mito[!duplicated(frenki.mito$UniProt), ]
# Izbacivanje NA za UniProt iz frenki.mito
frenki.mito <- frenki.mito[!(is.na(frenki.mito$UniProt)), ]
# Izbacivanje proteina koji su bili u CAFA trening setu iz frenki.mito
presek <- as.data.frame(intersect(frenki.mito$UniProt, cafa.mito$UniProt))
names(presek) <- c("UniProt")
frenki.mito <- frenki.mito[!(frenki.mito$UniProt %in% cafa.mito$UniProt), ]
#__________________________________________________________________________
# EVALUACIJA
# True positives - broj proteina za koje je FRENKI predvideo da su mito,
#                  a nalaze se u radnom datasetu
t.pos <- as.data.frame(intersect(radni.uni$Protein, frenki.mito$UniProt))
names(t.pos) <- c("UniProt")
tp <- dim(t.pos)[1] # tp = 47
# False positives - proteini za koje je FRENKI rekao da su mitohondrijalni, a
#                   NE nalaze se u radnom. Ostatak frenki.mito kada se oduzme tp
f.pos <- as.data.frame(setdiff(frenki.mito$UniProt, t.pos$UniProt))
fp <- dim(f.pos)[1] # fp = 2715
# False negatives - svi oni proteini koje FRENKI nije predvideo kao mito,
#                   a nalaze se u radnom. Ostatak radnog kada se oduzme tp
f.neg <- as.data.frame(setdiff(radni.uni$Protein, t.pos$UniProt))
fn <- dim(f.neg)[1] # fn = 2398
# Precision
prec <- tp/(tp+fp) # 0.017
rec <- tp/(tp+fn) # 0.019
f <- 2*prec*rec/(prec+rec) # 0.018
pog.f <- radni.uni[radni.uni$Protein %in% t.pos$UniProt, ]
barplot(table(pog.f$Status))
rm(pog.f)
f.tp <- radni.uni[radni.uni$Protein %in% t.pos$UniProt, ]
f.fp <- radni.uni[radni.uni$Protein %in% f.pos$UniProt, ]
f.fn <- radni.uni[radni.uni$Protein %in% f.neg$UniProt, ]
f.tp <- radni.uni[radni.uni$Protein %in% t.pos$UniProt, ]
names(f.pos) <- c("UniProt")
names(f.neg) <- c("UniProt")
f.tp <- radni.uni[radni.uni$Protein %in% t.pos$UniProt, ]
f.fp <- radni.uni[radni.uni$Protein %in% f.pos$UniProt, ]
f.fn <- radni.uni[radni.uni$Protein %in% f.neg$UniProt, ]
f.fn <- radni.uni[radni.uni$Protein %in% f.neg$UniProt, ]
names(f.pos) <- c("UniProt")
f.fp <- radni.uni[radni.uni$Protein %in% f.pos$UniProt, ]
f.fp <- radni.uni[frenki.mito$UniProt %in% f.pos$UniProt, ]
f.tp[, 6] <- "tp"
names(f.tp)[6] <- "Guess"
View(f.tp)
f.fp[, 6] <- "fp"
names(f.fp)[6] <- "Guess
""
"
f.fp[, 6] <- "fp"
names(f.fp)[6] <- "Guess"
f.fn[, 6] <- "fn"
names(f.fn)[6] <- "Guess"
View(f.tp)
View(f.fp)
View(f.fn)
f.res <- rbind((f.tp, f.fp, f.fn))
f.res <- rbind(rbind(f.tp, f.fp), f.fn)
View(f.res)
f.res[ ,7] <- "FRENKI"
names(f.res)[7] <- c("Alg")
View(f.res)
f.res <- f.res[, -5]
write.table(f.res, "Data/frenki_resenja.txt", quote = F, row.names = F,
col.names = T, sep = "\t")
rm(list = ls())
# Ucitavanje PANNZer rezultata i parsovanje imena
pan <- read.table("Data/pannzer_go_rezultati.txt", sep = "\t", header = T)
pan$qpid <- as.character(panz$qpid)
ime <- function(x) {
m1 <- gregexpr("|", x, fixed = T)
substr(x, m1[[1]][1]+1, m1[[1]][2]-1)
}
for(i in 1:length(pan$qpid)){
pan$Protein[i] <- ime(pan$qpid[i])
}
pan <- pan[, c(1, 8, 2:7)]
go <- 5739
# _________________________________________________
# Ekstrahovanje mito predikcija iz PANNZER rezultata
pan.mito <- pan[pan$goid == go, ]
pan.mito$Protein <- as.factor(pan.mito$Protein)
pan.mito$Protein <- droplevels(pan.mito)$Protein
#__________________________________________________
# Evaluacija
radni <- read.table("Data/radni_dataset.txt", header = T, sep = "\t")
radni <- radni[!duplicated(radni$Protein), ]
# True positives - proteini koji su i u PANNZERu i u radnom
t.pos <- as.data.frame(intersect(radni$Protein, pan.mito$Protein))
tp <- dim(t.pos)[1]
names(t.pos) <- c("Protein")
# False positives - proteini koji nisu u radnom a PANNZER je predvideo da su mito
f.pos <- as.data.frame(setdiff(pan.mito$Protein, radni$Protein))
fp <- dim (f.pos)[1]
# False negatives - sve sto PANNZER nije predvido kao mito a u radnom su
f.neg <- as.data.frame(setdiff(radni$Protein, pan.mito$Protein))
fn <- dim(f.neg)[1]
# Precision, recall, i f score
prec <- tp/(tp+fp)
rec <- tp/(tp+fn)
f <- 2*prec*rec/(prec+rec)
p.tp <- radni[radni$Protein %in% t.pos$Protein, ]
p.tp[ ,6] <- "tp"
names(p.tp)[6] <- c("Guess")
View(p.tp)
p.fp <- radni[radni$Protein %in% f.pos$Protein, ]
p.fp[ ,6] <- "fp"
names(p.fp)[6] <- c("Guess")
p.fp <- radni[pan.mito$Protein %in% f.pos$Protein, ]
p.fp[ ,6] <- "fp"
View(f.pos)
names(f.neg) <- c("Protein")
p.fp <- radni[pan.mito$Protein %in% f.pos$Protein, ]
p.fp[ ,6] <- "fp"
names(p.fp)[6] <- c("Guess")
p.fp <- radni[pan.mito$Protein %in% f.pos$Protein, ]
pan.mito$Protein
f.pos$Protein
names(f.pos) <- c("Protein")
f.pos <- as.data.frame(setdiff(pan.mito$Protein, radni$Protein))
fp <- dim (f.pos)[1]
names(f.pos) <- c("Protein")
View(f.pos)
p.fp <- radni[pan.mito$Protein %in% f.pos$Protein, ]
View(p.fp)
rm(list = ls())
pan <- read.table("Data/pannzer_go_rezultati.txt", sep = "\t", header = T)
pan$qpid <- as.character(panz$qpid)
ime <- function(x) {
m1 <- gregexpr("|", x, fixed = T)
substr(x, m1[[1]][1]+1, m1[[1]][2]-1)
}
pan <- read.table("Data/pannzer_go_rezultati.txt", sep = "\t", header = T)
pan$qpid <- as.character(pan$qpid)
ime <- function(x) {
m1 <- gregexpr("|", x, fixed = T)
substr(x, m1[[1]][1]+1, m1[[1]][2]-1)
}
for(i in 1:length(pan$qpid)){
pan$Protein[i] <- ime(pan$qpid[i])
}
pan <- pan[, c(1, 8, 2:7)]
go <- 5739
pan.mito <- pan[pan$goid == go, ]
pan.mito$Protein <- as.factor(pan.mito$Protein)
pan.mito$Protein <- droplevels(pan.mito)$Protein
radni <- read.table("Data/radni_dataset.txt", header = T, sep = "\t")
radni <- radni[!duplicated(radni$Protein), ]
t.pos <- as.data.frame(intersect(radni$Protein, pan.mito$Protein))
tp <- dim(t.pos)[1]
names(t.pos) <- c("Protein")
View(t.pos)
f.pos <- as.data.frame(setdiff(pan.mito$Protein, radni$Protein))
fp <- dim (f.pos)[1]
names(f.pos) <- c("Protein")
View(f.pos)
f.neg <- as.data.frame(setdiff(radni$Protein, pan.mito$Protein))
fn <- dim(f.neg)[1]
names(f.neg) <- c("Protein")
View(f.neg)
prec <- tp/(tp+fp)
rec <- tp/(tp+fn)
f <- 2*prec*rec/(prec+rec)
p.tp <- radni[radni$Protein %in% t.pos$Protein, ]
p.tp[ ,6] <- "tp"
names(p.tp)[6] <- c("Guess")
View(p.tp)
p.fp <- radni[pan.mito$Protein %in% f.pos$Protein, ]
View(p.fp)
View(f.pos)
pan.mito$Protein %in% f.pos$Protein
sum(pan.mito$Protein %in% f.pos$Protein)
p.fp <- pan.mito[pan.mito$Protein %in% f.pos$Protein, ]
p.fp <- pan.mito[pan.mito$Protein %in% f.pos$Protein, ]
p.fp[ ,9] <- "fp"
names(p.fp)[9] <- c("Guess")
p.fn <- radni[radni$Protein %in% f.neg$Protein, ]
p.fn[ ,6] <- "fn"
names(p.fn)[6] <- c("Guess")
View(p.fn)
p.res1 <- rbind(p.tp, p.fn)
View(p.res1)
p.res1 <- p.res1[ ,-5]
write.table(p.res1, "Data/pannzer_resenja_tpfn.txt", quote = F, sep = "\t",
col.names = T, row.names = F)
write.table(p.fp, "Data/pannzer_resenja_fp.txt", sep = "\t", quote = F,
col.names = T, row.names = F)
rm(list = ls())
# FRENKI EVALUACIJA ponovljeno
#_________________________________________________________________________
# UCITAVANJE DATASETOVA
# Gene ontology - mitochondrion
go <- "GO:0005739"
# Radni dataset, proteini iz IMPI-ja koji nisu u CAFA training datasetu (2827)
radni <- read.table("Data/radni_dataset.txt", sep = "\t", header = T)
radni.uni <- radni[!(duplicated(radni$Protein)), ]
radni.uni$Protein <- droplevels(radni.uni)$Protein
# Frenki predikcije. Izdvojeni proteini za koje je predvidjeno da su mito (3163)
frenki <- read.table("Data/FRENKI_predikcije_mapirano.txt",
header = T,
sep = "\t")
frenki.mito <- frenki[frenki$Predikcija == go, ]
frenki.mito$UniProt <- droplevels(frenki.mito)$UniProt
# Ucitavanje CAFA trening seta. Vadjenje samo mito proteina. (4675)
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
names(cafa) <- c("UniProt", "Predikcija")
cafa.mito <- cafa[cafa$Predikcija == go, ]
names(cafa.mito) <- c("UniProt", "Predikcija")
rm(cafa)
# _________________________________________________________________________
# CISCENJE FRENKI.MITO
# Izbacivanje duplikata iz frenki.mito
dim(frenki.mito)[1] > length(levels(frenki.mito$UniProt))
frenki.mito <- frenki.mito[!duplicated(frenki.mito$UniProt), ]
# Izbacivanje NA za UniProt iz frenki.mito
frenki.mito <- frenki.mito[!(is.na(frenki.mito$UniProt)), ]
# Izbacivanje proteina koji su bili u CAFA trening setu iz frenki.mito
presek <- as.data.frame(intersect(frenki.mito$UniProt, cafa.mito$UniProt))
names(presek) <- c("UniProt")
frenki.mito <- frenki.mito[!(frenki.mito$UniProt %in% cafa.mito$UniProt), ]
#__________________________________________________________________________
# EVALUACIJA
# True positives - broj proteina za koje je FRENKI predvideo da su mito,
#                  a nalaze se u radnom datasetu
t.pos <- as.data.frame(intersect(radni.uni$Protein, frenki.mito$UniProt))
names(t.pos) <- c("UniProt")
tp <- dim(t.pos)[1] # tp = 47
# False positives - proteini za koje je FRENKI rekao da su mitohondrijalni, a
#                   NE nalaze se u radnom. Ostatak frenki.mito kada se oduzme tp
f.pos <- as.data.frame(setdiff(frenki.mito$UniProt, t.pos$UniProt))
names(f.pos) <- c("UniProt")
fp <- dim(f.pos)[1] # fp = 2715
# False negatives - svi oni proteini koje FRENKI nije predvideo kao mito,
#                   a nalaze se u radnom. Ostatak radnog kada se oduzme tp
f.neg <- as.data.frame(setdiff(radni.uni$Protein, t.pos$UniProt))
names(f.neg) <- c("UniProt")
fn <- dim(f.neg)[1] # fn = 2398
# Precision
prec <- tp/(tp+fp) # 0.017
rec <- tp/(tp+fn) # 0.019
f <- 2*prec*rec/(prec+rec) # 0.018
f.fp <- frenki.mito[frenki.mito$UniProt %in% f.pos$UniProt, ]
View(f.fp)
f.fp[, 7] <- "fp"
names(f.fp)[7] <- "Guess"
f.tp <- radni.uni[radni.uni$Protein %in% t.pos$UniProt, ]
f.tp[, 6] <- "tp"
names(f.tp)[6] <- "Guess"
f.fn <- radni.uni[radni.uni$Protein %in% f.neg$UniProt, ]
f.fn[, 6] <- "fn"
names(f.fn)[6] <- "Guess"
f.res <- rbind(f.tp, f.fn)
f.res[ ,7] <- "FRENKI"
names(f.res)[7] <- c("Alg")
f.res <- f.res[, -5]
write.table(f.res, "Data/frenki_resenja_tpfn.txt", quote = F, row.names = F,
col.names = T, sep = "\t")
write.table(f.fp, "Data/frenki_resenja_fp.txt", sep = "\t", quote = F,
col.names = T, row.names = F)
rm(list = ls())
# Ucitavanje PANNZer rezultata i parsovanje imena
pan <- read.table("Data/pannzer_go_rezultati.txt", sep = "\t", header = T)
pan$qpid <- as.character(pan$qpid)
ime <- function(x) {
m1 <- gregexpr("|", x, fixed = T)
substr(x, m1[[1]][1]+1, m1[[1]][2]-1)
}
for(i in 1:length(pan$qpid)){
pan$Protein[i] <- ime(pan$qpid[i])
}
pan <- pan[, c(1, 8, 2:7)]
go <- 5739
# _________________________________________________
# Ekstrahovanje mito predikcija iz PANNZER rezultata
pan.mito <- pan[pan$goid == go, ]
pan.mito$Protein <- as.factor(pan.mito$Protein)
pan.mito$Protein <- droplevels(pan.mito)$Protein
#__________________________________________________
# Evaluacija
radni <- read.table("Data/radni_dataset.txt", header = T, sep = "\t")
radni <- radni[!duplicated(radni$Protein), ]
# True positives - proteini koji su i u PANNZERu i u radnom
t.pos <- as.data.frame(intersect(radni$Protein, pan.mito$Protein))
tp <- dim(t.pos)[1]
names(t.pos) <- c("Protein")
# False positives - proteini koji nisu u radnom a PANNZER je predvideo da su mito
f.pos <- as.data.frame(setdiff(pan.mito$Protein, radni$Protein))
fp <- dim (f.pos)[1]
names(f.pos) <- c("Protein")
# False negatives - sve sto PANNZER nije predvido kao mito a u radnom su
f.neg <- as.data.frame(setdiff(radni$Protein, pan.mito$Protein))
fn <- dim(f.neg)[1]
names(f.neg) <- c("Protein")
# Precision, recall, i f score
prec <- tp/(tp+fp)
rec <- tp/(tp+fn)
f <- 2*prec*rec/(prec+rec)
p.tp <- radni[radni$Protein %in% t.pos$Protein, ]
p.tp[ ,6] <- "tp"
names(p.tp)[6] <- c("Guess")
p.fn <- radni[radni$Protein %in% f.neg$Protein, ]
p.fn[ ,6] <- "fn"
names(p.fn)[6] <- c("Guess")
p.res1 <- rbind(p.tp, p.fn)
p.res1 <- p.res1[ ,-5]
p.res1[, 6] <- "PANNZER"
write.table(p.res1, "Data/pannzer_resenja_tpfn.txt", quote = F, sep = "\t",
col.names = T, row.names = F)
names(p.res1)[6] <- c("Alg")
write.table(p.res1, "Data/pannzer_resenja_tpfn.txt", quote = F, sep = "\t",
col.names = T, row.names = F)
rm(list = ls())
f.res <- read.table("Data/frenki_resenja_tpfn.txt", header = T, sep = "\t")
p.res <- read.table("Data/pannzer_resenja_tpfn.txt", header = T, sep = "\t")
View(f.res)
barplot(table(f.res$Guess))
barplot(table(p.res$Guess))
f.chi <- table(f.res$Guess)
f.chi
f.chi <- table(f.res$Guess)[2, ]
dim(f.chi)
f.chi <- table(f.res$Guess)[1]
f.chi <- table(f.res$Guess)
p.chi <- table(p.res$Guess)
p.chi
rbind(f.chi, p.chi)
chisq.test(rbind(f.chi, p.chi), method = "bonferroni")
chisq.test(rbind(f.chi, p.chi), method = "bonferoni")
chisq.test(rbind(f.chi, p.chi), method = "bonfferoni")
chisq.test(rbind(f.chi, p.chi), method = "bonnferoni")
chisq.test(rbind(f.chi, p.chi))
barplot(table(f.res$Status))
barplot(table(p.res$Status))
barplot(table(p.res$Status))
barplot(table(f.res$Status))
barplot(table(f.res$Status))
barplot(table(f.res$Status))
barplot(table(f.res[f.res$Guess == "tp", 4]))
barplot(table(p.res[p.res$Guess == "tp", 4]))
barplot(table(f.res[f.res$Guess == "tp", 4]), ylim = 50)
barplot(table(f.res[f.res$Guess == "tp", 4]), ylim = c(1:50))
barplot(table(f.res[f.res$Guess == "tp", 4]), ylim = 1:50)
?barplot
barplot(table(f.res[f.res$Guess == "tp", 4]), ylim = c(0, 50))
barplot(table(f.res[f.res$Guess == "tp", 4]), ylim = c(0, 30))
barplot(table(f.res[f.res$Guess == "tp", 4]), ylim = c(0, 30), main = "FRENKI")
barplot(table(f.res[f.res$Guess == "tp", 4]), ylim = c(0, 30),
main = "FRENKI - true positives (47)")
barplot(table(f.res[f.res$Guess == "tp", 4]), ylim = c(0, 30),
main = "FRENKI - true positives (ukupno 47)")
barplot(table(f.res[f.res$Guess == "tp", 4]), ylim = c(0, 200),
main = "PANNZER - true positives (ukupno 230)")
barplot(table(f.res[p.res$Guess == "tp", 4]), ylim = c(0, 200),
main = "PANNZER - true positives (ukupno 230)")
barplot(table(f.res[p.res$Guess == "tp", 4]), ylim = c(0, 170),
main = "PANNZER - true positives (ukupno 230)")
barplot(table(f.res[p.res$Guess == "tp", 4]), ylim = c(0, 200),
main = "PANNZER - true positives (ukupno 230)")
barplot(table(p.res[p.res$Guess == "tp", 4]), ylim = c(0, 200),
main = "PANNZER - true positives (ukupno 230)")
f.chi <- table(f.res[f.res$Guess == "tp", 4])
p.chi <- table(p.res[p.res$Guess == "tp", 4])
chisq.test(rbind(f.chi, p.chi))
f.chi
p.chi
rm(list = ls())
warnings()
# Ucitavanje PANNZer rezultata i parsovanje imena
pan <- read.table("Data/pannzer_go_rezultati.txt", sep = "\t", header = T)
pan$qpid <- as.character(pan$qpid)
ime <- function(x) {
m1 <- gregexpr("|", x, fixed = T)
substr(x, m1[[1]][1]+1, m1[[1]][2]-1)
}
for(i in 1:length(pan$qpid)){
pan$Protein[i] <- ime(pan$qpid[i])
}
pan <- pan[, c(1, 8, 2:7)]
go <- 5739
# _________________________________________________
# Ekstrahovanje mito predikcija iz PANNZER rezultata
pan.mito <- pan[pan$goid == go, ]
pan.mito$Protein <- as.factor(pan.mito$Protein)
pan.mito$Protein <- droplevels(pan.mito)$Protein
#__________________________________________________
# Evaluacija
radni <- read.table("Data/radni_dataset.txt", header = T, sep = "\t")
radni <- radni[!duplicated(radni$Protein), ]
# True positives - proteini koji su i u PANNZERu i u radnom
t.pos <- as.data.frame(intersect(radni$Protein, pan.mito$Protein))
tp <- dim(t.pos)[1] #230
names(t.pos) <- c("Protein")
# False positives - proteini koji nisu u radnom a PANNZER je predvideo da su mito
f.pos <- as.data.frame(setdiff(pan.mito$Protein, radni$Protein))
fp <- dim (f.pos)[1] #1
names(f.pos) <- c("Protein")
# False negatives - sve sto PANNZER nije predvido kao mito a u radnom su
f.neg <- as.data.frame(setdiff(radni$Protein, pan.mito$Protein))
fn <- dim(f.neg)[1] #2215
names(f.neg) <- c("Protein")
# Precision, recall, i f score
prec <- tp/(tp+fp)
rec <- tp/(tp+fn)
f <- 2*prec*rec/(prec+rec)
# ____________________________________________________________________________
# Priprema za poredjenje algoritama
# Pravi datasetove za tp, fp i fn
p.tp <- radni[radni$Protein %in% t.pos$Protein, ]
p.tp[ ,6] <- "tp"
names(p.tp)[6] <- c("Guess")
p.fn <- radni[radni$Protein %in% f.neg$Protein, ]
p.fn[ ,6] <- "fn"
names(p.fn)[6] <- c("Guess")
p.res1 <- rbind(p.tp, p.fn)
p.res1 <- p.res1[ ,-5]
p.res1[, 6] <- "PANNZER"
names(p.res1)[6] <- c("Alg")
write.table(p.res1, "Data/pannzer_resenja_tpfn.txt", quote = F, sep = "\t",
col.names = T, row.names = F)
# False positivi ne postoje u radno datasetu i zato ne mogu da ih spojim sa
# onim resenjima
p.fp <- pan.mito[pan.mito$Protein %in% f.pos$Protein, ]
p.fp[ ,9] <- "fp"
names(p.fp)[9] <- c("Guess")
write.table(p.fp, "Data/pannzer_resenja_fp.txt", sep = "\t", quote = F,
col.names = T, row.names = F)
rm(list = ls())
# Poredjenje algoritama
# Ucitava tp i fn iz frenkija i pannzera
f.res <- read.table("Data/frenki_resenja_tpfn.txt", header = T, sep = "\t")
p.res <- read.table("Data/pannzer_resenja_tpfn.txt", header = T, sep = "\t")
# Pravi barplotove koji pokazuju koliko se u tp od frenkija i pannzera nalazi
# poznatih, a koliko predikovanih mitohondrijalnih proteina
barplot(table(f.res[f.res$Guess == "tp", 4]), ylim = c(0, 30),
main = "FRENKI - true positives (ukupno 47)")
barplot(table(p.res[p.res$Guess == "tp", 4]), ylim = c(0, 200),
main = "PANNZER - true positives (ukupno 230)")
# Testira da li je razika u broju poznatih i predvidjenih znacajna
f.chi <- table(f.res[f.res$Guess == "tp", 4])
# Known mitochondrial Predicted mitochondrial
# 26                      21
p.chi <- table(p.res[p.res$Guess == "tp", 4])
# Known mitochondrial Predicted mitochondrial
# 181                      49
chisq.test(rbind(f.chi, p.chi))
# Pearson's Chi-squared test with Yates' continuity correction
#
# data:  rbind(f.chi, p.chi)
# X-squared = 10.089, df = 1, p-value = 0.001492
