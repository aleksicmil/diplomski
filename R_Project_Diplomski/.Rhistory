frenki <- read.table("Data/FRENKI_predikcije_mapirano.txt",
header = T,
sep = "\t")
frenki.mito <- frenki[frenki$Predikcija == go, ]
frenki.mito$UniProt <- droplevels(frenki.mito)$UniProt
write.table(frenki.mito, "Data/frenki.mito.txt", quote = F, col.names = T,
row.names = F, sep = "\t")
# _________________________________________________________________________
# CISCENJE FRENKI.MITO
# Izbacivanje duplikata iz frenki.mito
dim(frenki.mito)[1] - length(levels(frenki.mito$UniProt))
frenki.mito <- frenki.mito[!duplicated(frenki.mito$UniProt), ]
# Izbacivanje NA za UniProt iz frenki.mito
frenki.mito <- frenki.mito[!(is.na(frenki.mito$UniProt)), ]
# Izbacivanje proteina koji su bili u CAFA trening setu iz frenki.mito
presek <- as.data.frame(intersect(frenki.mito$UniProt, cafa.mito$UniProt))
names(presek) <- c("UniProt")
frenki.mito <- frenki.mito[!(frenki.mito$UniProt %in% cafa.mito$UniProt), ]
#__________________________________________________________________________
# EVALUACIJA
# True positives - broj proteina za koje je FRENKI predvideo da su mito,
#                  a nalaze se u radnom datasetu
t.pos <- as.data.frame(intersect(radni.cisto$UniProt, frenki.mito$UniProt))
names(t.pos) <- c("UniProt")
tp <- dim(t.pos)[1] # tp = 110
# False positives - proteini za koje je FRENKI rekao da su mitohondrijalni, a
#                   NE nalaze se u radnom. Ostatak frenki.mito kada se oduzme tp
f.pos <- as.data.frame(setdiff(frenki.mito$UniProt, t.pos$UniProt))
names(f.pos) <- c("UniProt")
fp <- dim(f.pos)[1] # fp = 2652
# False negatives - svi oni proteini koje FRENKI nije predvideo kao mito,
#                   a nalaze se u radnom. Ostatak radnog kada se oduzme tp
f.neg <- as.data.frame(setdiff(radni.cisto$UniProt, t.pos$UniProt))
names(f.neg) <- c("UniProt")
fn <- dim(f.neg)[1] # fn = 600
# Precision
prec <- tp/(tp+fp) # 0.040
rec <- tp/(tp+fn) # 0.155
f <- 2*prec*rec/(prec+rec) # 0.063
# ___________________________________________
# Priprema fajlova za poredjenja algoritama
# Pravi datasetove za tp, fp i fn
f.tp <- radni.cisto[radni.cisto$UniProt %in% t.pos$UniProt, ]
f.tp[, 3] <- "tp"
names(f.tp)[3] <- "Guess"
f.fn <- radni.cisto[radni.cisto$UniProt %in% f.neg$UniProt, ]
f.fn[, 3] <- "fn"
names(f.fn)[3] <- "Guess"
f.res <- rbind(f.tp, f.fn)
f.res[ ,4] <- "FRENKI"
names(f.res)[4] <- c("Alg")
write.table(f.res, "Data/frenki_resenja_tpfn.txt", quote = F, row.names = F,
col.names = T, sep = "\t")
# False positivi se ne nalaze u radnom datasetu, ne mogu se spojiti sa tp i fn
f.fp <- frenki.mito[frenki.mito$UniProt %in% f.pos$UniProt, ]
f.fp[, 3] <- "fp"
names(f.fp)[7] <- "Guess"
write.table(f.fp, "Data/frenki_resenja_fp.txt", sep = "\t", quote = F,
col.names = T, row.names = F)
rm(list = ls())
impi <- read.table("Data/All_mito_info.txt", sep = "\t", header = T)
write.table(impi$Gene.ID, "Data/impi_geni.txt", sep = "\t", col.names = F,
quote = F, row.names = F) #ens anotacije
Data/impi_geni.txt
View(impi)
impi.prot <- read.table("Data/impi_mapirano.tab", sep = "\t", header = T)
View(impi.prot)
rm(list = ls())
radni <- read.table("Data/impi_proteini_reviewed.tab", header = T, sep = "\t")
radni <- radni[!duplicated(radni$UniProt), ]
go <- read.table("Data/GO_mitochondrion.txt", header = F, sep = "\t")
radni.go <- radni[!(radni$UniProt %in% go$V1), ]
rm(list = ls())
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
names(cafa) <- c("UniProt", "Predikcija")
cafa.mito <- cafa[cafa$Predikcija == go, ]
names(cafa.mito) <- c("UniProt", "Predikcija")
rm(cafa)
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
names(cafa) <- c("UniProt", "Predikcija")
# Gene ontology - mitochondrion
go <- "GO:0005739"
cafa.mito <- cafa[cafa$Predikcija == go, ]
names(cafa.mito) <- c("UniProt", "Predikcija")
rm(cafa)
# Radni dataset, proteini iz IMPI-ja koji nisu u CAFA training datasetu (2827)
radni <- read.table("Data/impi_proteini_reviewed.tab", sep = "\t",
header = T)
names(radni) <- c("Gen", "UniProt")
# CIscenje radnog od kafe
radni.cafa <- as.data.frame(intersect(radni$UniProt, cafa.mito$UniProt))
names(radni.cafa) <- c("UniProt")
radni.cisto <- radni[!(radni$UniProt %in% radni.cafa$UniProt), ]
# FRENKI EVALUACIJA ponovljeno
#_________________________________________________________________________
# UCITAVANJE DATASETOVA
# Gene ontology - mitochondrion
go <- "GO:0005739"
# Ucitavanje CAFA trening seta. Vadjenje samo mito proteina. (4675)
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
names(cafa) <- c("UniProt", "Predikcija")
cafa.mito <- cafa[cafa$Predikcija == go, ]
names(cafa.mito) <- c("UniProt", "Predikcija")
rm(cafa)
# Radni dataset, proteini iz IMPI-ja koji nisu u CAFA training datasetu (2827)
radni <- read.table("Data/impi_proteini_reviewed.tab", sep = "\t",
header = T)
names(radni) <- c("Gen", "UniProt")
# nema duplikata
# CIscenje radnog od kafe
radni.cafa <- as.data.frame(intersect(radni$UniProt, cafa.mito$UniProt))
names(radni.cafa) <- c("UniProt")
radni.cisto <- radni[!(radni$UniProt %in% radni.cafa$UniProt), ]
# Frenki predikcije. Izdvojeni proteini za koje je predvidjeno
# da su mito (3163)
frenki <- read.table("Data/FRENKI_predikcije_mapirano.txt",
header = T,
sep = "\t")
frenki.mito <- frenki[frenki$Predikcija == go, ]
frenki.mito$UniProt <- droplevels(frenki.mito)$UniProt
write.table(frenki.mito, "Data/frenki.mito.txt", quote = F, col.names = T,
row.names = F, sep = "\t")
# _________________________________________________________________________
# CISCENJE FRENKI.MITO
# Izbacivanje duplikata iz frenki.mito
dim(frenki.mito)[1] - length(levels(frenki.mito$UniProt))
frenki.mito <- frenki.mito[!duplicated(frenki.mito$UniProt), ]
# Izbacivanje NA za UniProt iz frenki.mito
frenki.mito <- frenki.mito[!(is.na(frenki.mito$UniProt)), ]
# Izbacivanje proteina koji su bili u CAFA trening setu iz frenki.mito
presek <- as.data.frame(intersect(frenki.mito$UniProt, cafa.mito$UniProt))
names(presek) <- c("UniProt")
frenki.mito <- frenki.mito[!(frenki.mito$UniProt %in% cafa.mito$UniProt), ]
#__________________________________________________________________________
# EVALUACIJA
# True positives - broj proteina za koje je FRENKI predvideo da su mito,
#                  a nalaze se u radnom datasetu
t.pos <- as.data.frame(intersect(radni.cisto$UniProt, frenki.mito$UniProt))
names(t.pos) <- c("UniProt")
tp <- dim(t.pos)[1] # tp = 110
# False positives - proteini za koje je FRENKI rekao da su mitohondrijalni, a
#                   NE nalaze se u radnom. Ostatak frenki.mito kada se oduzme tp
f.pos <- as.data.frame(setdiff(frenki.mito$UniProt, t.pos$UniProt))
names(f.pos) <- c("UniProt")
fp <- dim(f.pos)[1] # fp = 2652
# False negatives - svi oni proteini koje FRENKI nije predvideo kao mito,
#                   a nalaze se u radnom. Ostatak radnog kada se oduzme tp
f.neg <- as.data.frame(setdiff(radni.cisto$UniProt, t.pos$UniProt))
names(f.neg) <- c("UniProt")
fn <- dim(f.neg)[1] # fn = 600
# Precision
prec <- tp/(tp+fp) # 0.040
rec <- tp/(tp+fn) # 0.155
f <- 2*prec*rec/(prec+rec) # 0.063
# ___________________________________________
# Priprema fajlova za poredjenja algoritama
# Pravi datasetove za tp, fp i fn
f.tp <- radni.cisto[radni.cisto$UniProt %in% t.pos$UniProt, ]
f.tp[, 3] <- "tp"
names(f.tp)[3] <- "Guess"
f.fn <- radni.cisto[radni.cisto$UniProt %in% f.neg$UniProt, ]
f.fn[, 3] <- "fn"
names(f.fn)[3] <- "Guess"
f.res <- rbind(f.tp, f.fn)
f.res[ ,4] <- "FRENKI"
names(f.res)[4] <- c("Alg")
write.table(f.res, "Data/frenki_resenja_tpfn.txt", quote = F, row.names = F,
col.names = T, sep = "\t")
# False positivi se ne nalaze u radnom datasetu, ne mogu se spojiti sa tp i fn
f.fp <- frenki.mito[frenki.mito$UniProt %in% f.pos$UniProt, ]
f.fp[, 3] <- "fp"
names(f.fp)[7] <- "Guess"
write.table(f.fp, "Data/frenki_resenja_fp.txt", sep = "\t", quote = F,
col.names = T, row.names = F)
install.packages('VennDiagram')
library(VennDiagram)
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
View(cafa)
View(cafa)
rm(list = ls())
# Gene ontology - mitochondrion
go <- "GO:0005739"
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
names(cafa) <- c("UniProt", "Predikcija")
cafa.mito <- cafa[cafa$Predikcija == go, ]
names(cafa.mito) <- c("UniProt", "Predikcija")
rm(cafa)
?duplicated()
duplicated(cafa.mito$UniProt)
sum(duplicated(cafa.mito$UniProt))
rm(list = ls())
# Gene ontology - mitochondrion
go <- "GO:0005739"
cafa <- read.table("Data/trening_cafa_C_ext.txt", header = F, sep = "\t")
names(cafa) <- c("UniProt", "Predikcija")
cafa.mito <- cafa[cafa$Predikcija == go, ]
names(cafa.mito) <- c("UniProt", "Predikcija")
rm(cafa)
# Radni dataset, proteini iz IMPI-ja koji nisu u CAFA
# training datasetu (1547)
radni <- read.table("Data/impi_proteini_reviewed.tab", sep = "\t",
header = T)
names(radni) <- c("Gen", "UniProt")
# CIscenje radnog od kafe
radni.cafa <- as.data.frame(intersect(radni$UniProt, cafa.mito$UniProt))
names(radni.cafa) <- c("UniProt")
radni.cisto <- radni[!(radni$UniProt %in% radni.cafa$UniProt), ]
frenki <- read.table("Data/FRENKI_predikcije_mapirano.txt",
header = T,
sep = "\t")
frenki.mito <- frenki[frenki$Predikcija == go, ]
frenki.mito$UniProt <- droplevels(frenki.mito)$UniProt
write.table(frenki.mito, "Data/frenki.mito.txt", quote = F, col.names = T,
row.names = F, sep = "\t")
dim(frenki.mito)[1] - length(levels(frenki.mito$UniProt))
frenki.mito <- frenki.mito[!duplicated(frenki.mito$UniProt), ]
frenki.mito <- frenki.mito[!(is.na(frenki.mito$UniProt)), ]
presek <- as.data.frame(intersect(frenki.mito$UniProt, cafa.mito$UniProt))
names(presek) <- c("UniProt")
frenki.mito <- frenki.mito[!(frenki.mito$UniProt %in% cafa.mito$UniProt), ]
rm(list = ls())
pan <- read.csv("Data/propagated_list_pannzer_mapped.txt", sep = "\t",
header = T)
pan.mito <- pan[pan$go == 5739, ]
pan.mito$UniProt <- as.factor(pan.mito$UniProt)
pan.mito$UniProt <- droplevels(pan.mito)$UniProt
radni <- read.table("Data/impi_proteini_reviewed.tab", header = T, sep = "\t")
radni <- radni[!duplicated(radni$UniProt), ]
t.pos <- as.data.frame(intersect(radni$UniProt, pan.mito$UniProt))
t.pos <- as.data.frame(intersect(radni$UniProt, pan.mito$UniProt))
tp <- dim(t.pos)[1] #1169
names(t.pos) <- c("UniProt")
# False positives - proteini koji nisu u radnom a PANNZER je
# predvideo da su mito
f.pos <- as.data.frame(setdiff(pan.mito$UniProt, radni$UniProt))
fp <- dim(f.pos)[1] #759
names(f.pos) <- c("UniProt")
# False negatives - sve sto PANNZER nije predvido kao mito a u radnom su
f.neg <- as.data.frame(setdiff(radni$UniProt, pan.mito$UniProt))
fn <- dim(f.neg)[1] #378
names(f.neg) <- c("uniProt")
# Precision, recall, i f score
prec <- tp/(tp+fp) # 0.6
rec <- tp/(tp+fn) # 0.76
f <- 2*prec*rec/(prec+rec) #0.67
go <- read.table("Data/GO_mitochondrion.txt", header = F, sep = "\t")
radni.go <- radni[!(radni$UniProt %in% go$V1), ]
t.pos.go <- as.data.frame(intersect(radni.go$UniProt, pan.mito$UniProt))
tp.go <- dim(t.pos.go)[1] #593
names(t.pos.go) <- c("UniProt")
# False positives - proteini koji nisu u radnom a PANNZER je
# predvideo da su mito
f.pos.go <- as.data.frame(setdiff(pan.mito$UniProt, radni.go$UniProt))
fp.go <- dim(f.pos.go)[1] #1335
names(f.pos.go) <- c("UniProt")
# False negatives - sve sto PANNZER nije predvido kao mito a u radnom su
f.neg.go <- as.data.frame(setdiff(radni.go$UniProt, pan.mito$UniProt))
fn.go <- dim(f.neg.go)[1] #337
names(f.neg.go) <- c("UniProt")
# Precision, recall, i f score
prec.go <- tp.go/(tp.go+fp.go) # 0.31
rec.go <- tp.go/(tp.go+fn.go) # 0.64
f.go <- 2*prec.go*rec.go/(prec.go+rec.go) #0.41
write.table(t.pos.go, "Data/pannzer_tp.txt", row.names = F, col.names = T,
sep = "\t")
write.table(f.pos.go, "Data/pannzer_fp.txt", row.names = F, col.names = T,
sep = "\t")
rm(list = ls())
f.tp <- read.table("Data/frenki_tp.txt", header = T, sep = "\t")
f.fp <- read.table("Data/frenki_fp.txt", header = T, sep = "\t")
p.tp <- read.table("Data/pannzer_tp.txt", header = T, sep = "\t")
p.fp <- read.table("Data/pannzer_fp.txt", header = T, sep = "\t")
centar <- as.data.frame(intersect(f.tp$UniProt, p.tp$UniProt))
names(centar) <- c("UniProt")
samo.f <- f.tp[!(f.tp$UniProt %in% centar$UniProt), ]
samo.p <- as.data.frame(p.tp[!(p.tp$UniProt %in% centar$UniProt), ])
presek.greske <- as.data.frame(intersect(f.fp$UniProt, p.fp$UniProt))
impi.info <- read.table("Data/All_mito_info.txt", header = T, sep = "\t")
impi.prot <- read.table("Data/impi_proteini_reviewed.tab",
header = T, sep = "\t")
View(impi.prot)
View(impi.info)
View(impi.info)
impi <- merge(impi.info, impi.prot, by.x = "Gene.ID", by.y = "Gene",
all.y = T)
View(impi)
View(samo.f)
samo.f <- merge(samo.f, impi, by = "UniProt", all.x = T)
View(samo.p)
names(samo.p) <- c("UniProt")
samo.p <- merge(samo.p, impi, by = "UniProt", all.x = T)
View(samo.p)
str(samo.f)
str(samo.f$Category)
barplot(samo.f$Category)
plot(samo.f$Category)
plot(samo.p$Category)
samo.f$Disease <- as.factor(samo.f$Disease)
samo.p$Disease <- as.factor(samo.p$Disease)
plot(samo.f$Disease)
plot(samo.p$Disease)
table
table(samo.f$Disease)
table(samo.p$Disease)
47/8
388/149
go <- read.table("Data/GO_mitochondrion.txt", header = T, sep = "\t")
View(go)
go <- read.table("Data/GO_mitochondrion.txt", header = F, sep = "\t")
samo.f <- merge(samo.f, go[, c(1, 4)], by.x = "UniProt", by.y = "V1",
all.x = T)
samo.p <- merge(samo.p, go[, c(1, 4)], by.x = "UniProt", by.y = "V1",
all.x = T)
View(samo.p)
write.table(samo.f$UniProt, "Data/frenki_tp_UniProt.txt",
col.names = F, row.names = F, sep = "\t")
samo.f$UniProt
write.table(samo.f$UniProt, "Data/frenki_tp_UniProt.txt",
col.names = F, row.names = F, sep = "\t", quote = F)
duzine <- read.table("Data/impi_duzina.tab", sep = "\t", header = F)
View(duzine)
duzine <- read.table("Data/impi_duzina.tab", sep = "\t", header = T)
View(duzine)
duzine <- read.table("Data/impi_duzina.tab", sep = "\t", header = T)
impi <- merge(impi, duzine, by.x = "UniProt", by.y = "Entry",
all.x = T)
View(impi)
rm(list = ls())
f.tp <- read.table("Data/frenki_tp.txt", header = T, sep = "\t")
f.fp <- read.table("Data/frenki_fp.txt", header = T, sep = "\t")
p.tp <- read.table("Data/pannzer_tp.txt", header = T, sep = "\t")
p.fp <- read.table("Data/pannzer_fp.txt", header = T, sep = "\t")
centar <- as.data.frame(intersect(f.tp$UniProt, p.tp$UniProt))
names(centar) <- c("UniProt")
samo.f <- f.tp[!(f.tp$UniProt %in% centar$UniProt), ]
samo.p <- as.data.frame(p.tp[!(p.tp$UniProt %in% centar$UniProt), ])
names(samo.p) <- c("UniProt")
presek.greske <- as.data.frame(intersect(f.fp$UniProt, p.fp$UniProt))
impi.info <- read.table("Data/All_mito_info.txt", header = T, sep = "\t")
impi.prot <- read.table("Data/impi_proteini_reviewed.tab",
header = T, sep = "\t")
impi <- merge(impi.info, impi.prot, by.x = "Gene.ID", by.y = "Gene",
all.y = T)
duzine <- read.table("Data/impi_duzina.tab", sep = "\t", header = T)
impi <- merge(impi, duzine, by.x = "UniProt", by.y = "Entry",
all.x = T)
samo.f <- merge(samo.f, impi, by = "UniProt", all.x = T)
samo.p <- merge(samo.p, impi, by = "UniProt", all.x = T)
View(samo.f)
hist(samo.f$Length, samo.p$Length)
hist(samo.f$Length)
hist(samo.f$Length, breaks = 100)
hist(samo.p$Length, breaks = 100)
hist(samo.f$Length, breaks = 100, density = T)
hist(density(samo.f$Length), breaks = 100)
hist(density(samo.f$Length))
samo.f$Length
str(samo.f$Length)
str(samo.p$Length)
mean(samo.f$Length)
mean(samo.p$Length)
median(samo.p$Length)
median(samo.f$Length)
plot(density(samo.f$Length))
plot(density(samo.f$Length), density(samo.p$Length))
plot(density(samo.f$Length), density(samo.p$Length))
plot(ensity(samo.p$Length))
plot(density(samo.f$Length))
plot(density(samo.p$Length))
plot(density(samo.f$Length))
line(density(samo.p$Length))
plot(density(samo.f$Length))
plot(density(samo.p$Length), add = T)
plot(density(samo.f$Length))
plot(density(samo.f$Length))
plot(density(samo.p$Length), add = T)
?plot
lines(density(samo.p$Length))
plot(density(samo.f$Length))
lines(density(samo.p$Length))
plot(density(samo.p$Length))
lines(density(samo.f$Length))
plot(density(samo.p$Length), main = "Raspored duzina proteina")
plot(density(samo.p$Length), main = "Raspored duzina proteina", col = "red")
lines(density(samo.f$Length), col = "blue")
lines(density(impi$Length))
lines(density(impi$Length, na.rm = T))
lines(density(impi$Length, na.rm = T), col = "green")
?plot
legend(c("a", "b", "c"), col = c("red", "blue", "green"))
legend(legend, c("a", "b", "c"), col = c("red", "blue", "green"))
legend("topright", c("a", "b", "c"), col = c("red", "blue", "green"))
legend("top", c("a", "b", "c"), col = c("red", "blue", "green"))
plot(density(samo.p$Length), main = "Broj AK u proteinu", col = "red",
ylab = "Duzina proteina")
plot(density(samo.p$Length), main = "Broj AK u proteinu", col = "red",
ylab = "Duzina proteina")
plot(density(samo.p$Length), main = "Broj AK u proteinu", col = "red",
Xlab = "Duzina proteina")
lines(density(samo.f$Length), col = "blue")
lines(density(impi$Length, na.rm = T), col = "green")
legend("top", legend = c("PANNZER", "FRENKI", "IMPI"),
fill = c("red", "blue", "green"))
legend(x = 5000, y = 0.0015, legend = c("PANNZER", "FRENKI", "IMPI"),
fill = c("red", "blue", "green"))
legend(x = 5000, y = 0.002, legend = c("PANNZER", "FRENKI", "IMPI"),
fill = c("red", "blue", "green"))
plot(density(samo.p$Length), main = "Broj AK u proteinu", col = "red",
Xlab = "Duzina proteina")
lines(density(samo.f$Length), col = "blue")
lines(density(impi$Length, na.rm = T), col = "green")
legend(x = 5000, y = 0.002, legend = c("PANNZER", "FRENKI", "IMPI"),
fill = c("red", "blue", "green"))
1169-593
1169-593
1547-930
View(impi)
?plot
plot(density(samo.p$Length), main = "Broj AK u proteinu", col = "red",
Xlab = "Duzina proteina", xlim = 2000)
plot(density(samo.p$Length), main = "Broj AK u proteinu", col = "red",
Xlab = "Duzina proteina", xlim = c(0, 2000))
lines(density(samo.f$Length), col = "blue")
lines(density(impi$Length, na.rm = T), col = "green")
legend(x = 5000, y = 0.002, legend = c("PANNZER", "FRENKI", "IMPI"),
fill = c("red", "blue", "green"))
legend(x = 1500, y = 0.002, legend = c("PANNZER", "FRENKI", "IMPI"),
fill = c("red", "blue", "green"))
plot(density(samo.p$Length), main = "Broj AK u proteinu", col = "red",
Xlab = "Duzina proteina", xlim = c(0, 100))
lines(density(samo.f$Length), col = "blue")
lines(density(impi$Length, na.rm = T), col = "green")
plot(density(samo.p$Length), main = "Broj AK u proteinu", col = "red",
Xlab = "Duzina proteina", xlim = c(0, 500))
lines(density(samo.f$Length), col = "blue")
lines(density(impi$Length, na.rm = T), col = "green")
110+538
1547-648
1265+86+2566
648/(648+3917)
648/(648+3917)
648/(648+899)
2*0.14*0.42/(0.14+0.42)
rez <- as.matrix(c(0.14, 0.04, 0.6, 0.31),
c(0.42, 0.155, 0.76, 0.64),
c(0.21, 0.063, 0.67, 0.41),
nrow = 3, ncol = 4,
colnames = c("FANNZER", "FRENKI", "PANNZER", "PANNZER_GO"),
rownames = c("preciznost", "odziv", "F mera"))
rez <- matrix(c(0.14, 0.04, 0.6, 0.31),
c(0.42, 0.155, 0.76, 0.64),
c(0.21, 0.063, 0.67, 0.41),
nrow = 3, ncol = 4,
colnames = c("FANNZER", "FRENKI", "PANNZER", "PANNZER_GO"),
rownames = c("preciznost", "odziv", "F mera"))
rez <- matrix(c(0.14, 0.04, 0.6, 0.31),
c(0.42, 0.155, 0.76, 0.64),
c(0.21, 0.063, 0.67, 0.41),
nrow = 3, ncol = 4)
?matrix
rez <- matrix(c(0.14, 0.04, 0.6, 0.31, 0.42, 0.155, 0.76, 0.64,
0.21, 0.063, 0.67, 0.41),
nrow = 3, ncol = 4,
dimnames = c("preciznost", "odziv", "F mera"),
c("FANNZER", "FRENKI", "PANNZER", "PANNZER_GO"))
rez <- matrix(c(0.14, 0.04, 0.6, 0.31, 0.42, 0.155, 0.76, 0.64,
0.21, 0.063, 0.67, 0.41),
nrow = 3, ncol = 4, byrow = T
dimnames = c("preciznost", "odziv", "F mera"),
c("FANNZER", "FRENKI", "PANNZER", "PANNZER_GO"))
rez <- matrix(c(0.14, 0.04, 0.6, 0.31, 0.42, 0.155, 0.76, 0.64,
0.21, 0.063, 0.67, 0.41),
nrow = 3, ncol = 4, byrow = T,
dimnames = c("preciznost", "odziv", "F mera"),
c("FANNZER", "FRENKI", "PANNZER", "PANNZER_GO"))
c("FANNZER", "FRENKI", "PANNZER", "PANNZER_GO"))
rez <- matrix(c(0.14, 0.04, 0.6, 0.31, 0.42, 0.155, 0.76, 0.64,
0.21, 0.063, 0.67, 0.41),
nrow = 3, ncol = 4, byrow = T,
dimnames = list(c("preciznost", "odziv", "F mera"),
c("FANNZER", "FRENKI", "PANNZER", "PANNZER_GO")))
rez
barplot(rez)
barplot(rez, beside = T)
rez <- t(rez)
rez
barplot(rez, beside = T)
rez <- rez[c(2, 3, 4, 1), ]
rez
barplot(rez, beside = T)
barplot(rez, beside = T, ylim = c(0, 1))
rownames(rez)
legend("topleft", legend = c("FRENKI", "PANNZER", "PANNZER_GO", "FANNZER"))
?legend
legend("topleft", legend = c("FRENKI", "PANNZER", "PANNZER_GO", "FANNZER"),
cex = 0.1)
legend("topleft", legend = c("FRENKI", "PANNZER", "PANNZER_GO", "FANNZER"),
cex = 0.5)
barplot(rez, beside = T, ylim = c(0, 1))
legend("topleft", legend = c("FRENKI", "PANNZER", "PANNZER_GO", "FANNZER"),
cex = 0.5)
legend("topleft", legend = c("FRENKI", "PANNZER", "PANNZER_GO", "FANNZER"),
cex = 0.7)
legend("topleft", legend = c("FRENKI", "PANNZER", "PANNZER_GO", "FANNZER"),
cex = 0.6)
barplot(rez, beside = T, ylim = c(0, 1))
legend("topleft", legend = c("FRENKI", "PANNZER", "PANNZER_GO", "FANNZER"),
cex = 0.6)
barplot(rez, beside = T, ylim = c(0, 1), col = (1, 2, 3, 4))
barplot(rez, beside = T, ylim = c(0, 1), col = c(1, 2, 3, 4))
legend("topleft", legend = c("FRENKI", "PANNZER", "PANNZER_GO", "FANNZER"),
cex = 0.6, fill = c(1, 2, 3, 4))
